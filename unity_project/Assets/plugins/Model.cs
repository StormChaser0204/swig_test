// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxIHbWVzc2FnZSIjCgtoZXhfY29vcmRfdBIJCgF4GAEg",
            "ASgFEgkKAXkYAiABKAUiTAoSY2FwaXRhbF9oZXhfem9uZV90EgwKBG5hbWUY",
            "ASABKAkSKAoIZmVhdHVyZXMYAiADKA4yEi5tZXNzYWdlLmZlYXR1cmVfdEIC",
            "EAEiSgoNY2FwaXRhbF9oZXhfdBINCgVjb29yZBgBIAEoBRIqCgV6b25lcxgC",
            "IAMoCzIbLm1lc3NhZ2UuY2FwaXRhbF9oZXhfem9uZV90IjIKCWNhcGl0YWxf",
            "dBIlCgVoZXhlcxgBIAMoCzIWLm1lc3NhZ2UuY2FwaXRhbF9oZXhfdCKVAQoT",
            "b2ZmbWFwX3Bvc3Nlc2lvbnNfdBIRCglwcm92aW5jZXMYASABKAUSDAoEbWlu",
            "cxgCIAEoBRIMCgRtYWpzGAMgASgFEhQKDHN1cnZleV9zaGlwcxgEIAEoBRIj",
            "ChtjYW5ub3RfYnVpbGRfb2ZmbWFwX2NhcGl0YWwYBSABKAUSFAoMb2xkX3No",
            "aXB5YXJkGAYgASgFItgBCghuYXRpb25fdBIMCgRuYW1lGAEgASgJEhIKCnNo",
            "b3J0X25hbWUYAiABKAkSIwoHY2FwaXRhbBgDIAEoCzISLm1lc3NhZ2UuY2Fw",
            "aXRhbF90EhwKFGZyZWVfc3RyYXRlZ2ljX21vdmVzGAQgASgFEhsKE2NhcGl0",
            "YWxfc3Rhcl9wb2ludHMYBSABKAUSNwoRb2ZmbWFwX3Bvc3Nlc2lvbnMYBiAB",
            "KAsyHC5tZXNzYWdlLm9mZm1hcF9wb3NzZXNpb25zX3QSEQoJbmF0aW9uX2lk",
            "GAcgASgFIoABCgluYXRpb25zX3QSMAoHbmF0aW9ucxgBIAMoCzIfLm1lc3Nh",
            "Z2UubmF0aW9uc190Lk5hdGlvbnNFbnRyeRpBCgxOYXRpb25zRW50cnkSCwoD",
            "a2V5GAEgASgJEiAKBXZhbHVlGAIgASgLMhEubWVzc2FnZS5uYXRpb25fdDoC",
            "OAEihAEKBWhleF90EiMKBWNvb3JkGAEgASgLMhQubWVzc2FnZS5oZXhfY29v",
            "cmRfdBINCgVvd25lchgCIAEoBRIjCgdmZWF0dXJlGAMgASgOMhIubWVzc2Fn",
            "ZS5mZWF0dXJlX3QSIgoWbmV1dHJhbF96b25lX2JvcmRlcmluZxgEIAMoBUIC",
            "EAEiQgoOcHJvdmluY2VfaGV4X3QSCwoDaGV4GAEgASgFEiMKB2ZlYXR1cmUY",
            "AiABKA4yEi5tZXNzYWdlLmZlYXR1cmVfdCI0Cgpwcm92aW5jZV90EiYKBWhl",
            "eGVzGAEgAygLMhcubWVzc2FnZS5wcm92aW5jZV9oZXhfdCJ4Cg1vZmZtYXBf",
            "YXJlYV90EgwKBG5hbWUYASABKAkSKAoIZmVhdHVyZXMYAiADKA4yEi5tZXNz",
            "YWdlLmZlYXR1cmVfdEICEAESEwoLY291bnRlcl9oZXgYAyABKAUSGgoOYWRq",
            "YWNlbnRfaGV4ZXMYBCADKAVCAhABInMKHHN0YXJ0aW5nX25hdGlvbmFsX2hv",
            "bGRpbmdzX3QSJgoJcHJvdmluY2VzGAEgAygLMhMubWVzc2FnZS5wcm92aW5j",
            "ZV90EisKC29mZm1hcF9hcmVhGAIgASgLMhYubWVzc2FnZS5vZmZtYXBfYXJl",
            "YV90Iq0CCgVtYXBfdBINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUS",
            "FgoKbnpfcGxhbmV0cxgDIAMoBUICEAESFAoIbnpfaGV4ZXMYBCADKAVCAhAB",
            "ElAKGnN0YXJ0aW5nX25hdGlvbmFsX2hvbGRpbmdzGAUgAygLMiwubWVzc2Fn",
            "ZS5tYXBfdC5TdGFydGluZ05hdGlvbmFsSG9sZGluZ3NFbnRyeRIdCgVoZXhl",
            "cxgGIAMoCzIOLm1lc3NhZ2UuaGV4X3QaZgodU3RhcnRpbmdOYXRpb25hbEhv",
            "bGRpbmdzRW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUubWVz",
            "c2FnZS5zdGFydGluZ19uYXRpb25hbF9ob2xkaW5nc190OgI4ASJLCgdtb2Rl",
            "bF90EiMKB25hdGlvbnMYASABKAsyEi5tZXNzYWdlLm5hdGlvbnNfdBIbCgNt",
            "YXAYAiABKAsyDi5tZXNzYWdlLm1hcF90IikKCm9vYl91bml0X3QSDAoEdW5p",
            "dBgBIAEoCRINCgV0aW1lcxgCIAEoBSJrChRwcm9kdWN0aW9uX2VsZW1lbnRf",
            "dBIMCgR5ZWFyGAEgASgFEiEKBnNlYXNvbhgCIAEoDjIRLm1lc3NhZ2Uuc2Vh",
            "c29uX3QSIgoFdW5pdHMYAyADKAsyEy5tZXNzYWdlLm9vYl91bml0X3QigQMK",
            "EHN0YXJ0aW5nX2ZsZWV0X3QSEQoFaGV4ZXMYASADKAVCAhABEiIKBXVuaXRz",
            "GAIgAygLMhMubWVzc2FnZS5vb2JfdW5pdF90Eg8KB3Jlc2VydmUYAyABKAUS",
            "OgoTcHJld2FyX2NvbnN0cnVjdGlvbhgEIAMoCzIdLm1lc3NhZ2UucHJvZHVj",
            "dGlvbl9lbGVtZW50X3QSIwobc3RyYXRlZ2ljX21vdmVfYXJyaXZhbF95ZWFy",
            "GAUgASgFEjgKHXN0cmF0ZWdpY19tb3ZlX2Fycml2YWxfc2Vhc29uGAYgASgO",
            "MhEubWVzc2FnZS5zZWFzb25fdBJPChRoZXhfcGxhY2VtZW50X2xpbWl0cxgH",
            "IAMoCzIxLm1lc3NhZ2Uuc3RhcnRpbmdfZmxlZXRfdC5IZXhQbGFjZW1lbnRM",
            "aW1pdHNFbnRyeRo5ChdIZXhQbGFjZW1lbnRMaW1pdHNFbnRyeRILCgNrZXkY",
            "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIpQBChJtb3RoYmFsbF9yZXNlcnZl",
            "X3QSIgoFdW5pdHMYASADKAsyEy5tZXNzYWdlLm9vYl91bml0X3QSKAoLd2Fy",
            "X3JlbGVhc2UYAiADKAsyEy5tZXNzYWdlLm9vYl91bml0X3QSMAoTbGltaXRl",
            "ZF93YXJfcmVsZWFzZRgDIAMoCzITLm1lc3NhZ2Uub29iX3VuaXRfdCKYAgoR",
            "b3JkZXJfb2ZfYmF0dGxlX3QSRwoPc3RhcnRpbmdfZmxlZXRzGAEgAygLMi4u",
            "bWVzc2FnZS5vcmRlcl9vZl9iYXR0bGVfdC5TdGFydGluZ0ZsZWV0c0VudHJ5",
            "EjUKEG1vdGhiYWxsX3Jlc2VydmUYAiABKAsyGy5tZXNzYWdlLm1vdGhiYWxs",
            "X3Jlc2VydmVfdBIxCgpwcm9kdWN0aW9uGAMgAygLMh0ubWVzc2FnZS5wcm9k",
            "dWN0aW9uX2VsZW1lbnRfdBpQChNTdGFydGluZ0ZsZWV0c0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLm1lc3NhZ2Uuc3RhcnRpbmdfZmxl",
            "ZXRfdDoCOAEikgEKEm9yZGVyc19vZl9iYXR0bGVfdBIzCgRvb2JzGAEgAygL",
            "MiUubWVzc2FnZS5vcmRlcnNfb2ZfYmF0dGxlX3QuT29ic0VudHJ5GkcKCU9v",
            "YnNFbnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiABKAsyGi5tZXNzYWdl",
            "Lm9yZGVyX29mX2JhdHRsZV90OgI4ASpGCglmZWF0dXJlX3QSCAoEbm9uZRAA",
            "EggKBGJhdHMQARIGCgJzYhACEgcKA21pbhADEgcKA21hahAEEgsKB2NhcGl0",
            "YWwQBSogCghzZWFzb25fdBIKCgZzcHJpbmcQABIICgRmYWxsEAFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::Message.feature_t), typeof(global::Message.season_t), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Message.hex_coord_t), global::Message.hex_coord_t.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_hex_zone_t), global::Message.capital_hex_zone_t.Parser, new[]{ "Name", "Features" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_hex_t), global::Message.capital_hex_t.Parser, new[]{ "Coord", "Zones" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_t), global::Message.capital_t.Parser, new[]{ "Hexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.offmap_possesions_t), global::Message.offmap_possesions_t.Parser, new[]{ "Provinces", "Mins", "Majs", "SurveyShips", "CannotBuildOffmapCapital", "OldShipyard" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.nation_t), global::Message.nation_t.Parser, new[]{ "Name", "ShortName", "Capital", "FreeStrategicMoves", "CapitalStarPoints", "OffmapPossesions", "NationId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.nations_t), global::Message.nations_t.Parser, new[]{ "Nations" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.hex_t), global::Message.hex_t.Parser, new[]{ "Coord", "Owner", "Feature", "NeutralZoneBordering" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.province_hex_t), global::Message.province_hex_t.Parser, new[]{ "Hex", "Feature" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.province_t), global::Message.province_t.Parser, new[]{ "Hexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.offmap_area_t), global::Message.offmap_area_t.Parser, new[]{ "Name", "Features", "CounterHex", "AdjacentHexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.starting_national_holdings_t), global::Message.starting_national_holdings_t.Parser, new[]{ "Provinces", "OffmapArea" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.map_t), global::Message.map_t.Parser, new[]{ "Width", "Height", "NzPlanets", "NzHexes", "StartingNationalHoldings", "Hexes" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.model_t), global::Message.model_t.Parser, new[]{ "Nations", "Map" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.oob_unit_t), global::Message.oob_unit_t.Parser, new[]{ "Unit", "Times" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.production_element_t), global::Message.production_element_t.Parser, new[]{ "Year", "Season", "Units" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.starting_fleet_t), global::Message.starting_fleet_t.Parser, new[]{ "Hexes", "Units", "Reserve", "PrewarConstruction", "StrategicMoveArrivalYear", "StrategicMoveArrivalSeason", "HexPlacementLimits" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.mothball_reserve_t), global::Message.mothball_reserve_t.Parser, new[]{ "Units", "WarRelease", "LimitedWarRelease" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.order_of_battle_t), global::Message.order_of_battle_t.Parser, new[]{ "StartingFleets", "MothballReserve", "Production" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.orders_of_battle_t), global::Message.orders_of_battle_t.Parser, new[]{ "Oobs" }, null, null, new pbr::GeneratedCodeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum feature_t {
    none = 0,
    bats = 1,
    sb = 2,
    min = 3,
    maj = 4,
    capital = 5,
  }

  public enum season_t {
    spring = 0,
    fall = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class hex_coord_t : pb::IMessage<hex_coord_t> {
    private static readonly pb::MessageParser<hex_coord_t> _parser = new pb::MessageParser<hex_coord_t>(() => new hex_coord_t());
    public static pb::MessageParser<hex_coord_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public hex_coord_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public hex_coord_t(hex_coord_t other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    public hex_coord_t Clone() {
      return new hex_coord_t(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as hex_coord_t);
    }

    public bool Equals(hex_coord_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    public void MergeFrom(hex_coord_t other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  nations messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_hex_zone_t : pb::IMessage<capital_hex_zone_t> {
    private static readonly pb::MessageParser<capital_hex_zone_t> _parser = new pb::MessageParser<capital_hex_zone_t>(() => new capital_hex_zone_t());
    public static pb::MessageParser<capital_hex_zone_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_hex_zone_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_hex_zone_t(capital_hex_zone_t other) : this() {
      name_ = other.name_;
      features_ = other.features_.Clone();
    }

    public capital_hex_zone_t Clone() {
      return new capital_hex_zone_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.feature_t> _repeated_features_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Message.feature_t) x);
    private readonly pbc::RepeatedField<global::Message.feature_t> features_ = new pbc::RepeatedField<global::Message.feature_t>();
    public pbc::RepeatedField<global::Message.feature_t> Features {
      get { return features_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_hex_zone_t);
    }

    public bool Equals(capital_hex_zone_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!features_.Equals(other.features_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= features_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      features_.WriteTo(output, _repeated_features_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      return size;
    }

    public void MergeFrom(capital_hex_zone_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      features_.Add(other.features_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_hex_t : pb::IMessage<capital_hex_t> {
    private static readonly pb::MessageParser<capital_hex_t> _parser = new pb::MessageParser<capital_hex_t>(() => new capital_hex_t());
    public static pb::MessageParser<capital_hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_hex_t(capital_hex_t other) : this() {
      coord_ = other.coord_;
      zones_ = other.zones_.Clone();
    }

    public capital_hex_t Clone() {
      return new capital_hex_t(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private int coord_;
    public int Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.capital_hex_zone_t> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(18, global::Message.capital_hex_zone_t.Parser);
    private readonly pbc::RepeatedField<global::Message.capital_hex_zone_t> zones_ = new pbc::RepeatedField<global::Message.capital_hex_zone_t>();
    public pbc::RepeatedField<global::Message.capital_hex_zone_t> Zones {
      get { return zones_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_hex_t);
    }

    public bool Equals(capital_hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coord != other.Coord) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Coord != 0) hash ^= Coord.GetHashCode();
      hash ^= zones_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coord != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coord);
      }
      zones_.WriteTo(output, _repeated_zones_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Coord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coord);
      }
      size += zones_.CalculateSize(_repeated_zones_codec);
      return size;
    }

    public void MergeFrom(capital_hex_t other) {
      if (other == null) {
        return;
      }
      if (other.Coord != 0) {
        Coord = other.Coord;
      }
      zones_.Add(other.zones_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coord = input.ReadInt32();
            break;
          }
          case 18: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_t : pb::IMessage<capital_t> {
    private static readonly pb::MessageParser<capital_t> _parser = new pb::MessageParser<capital_t>(() => new capital_t());
    public static pb::MessageParser<capital_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_t(capital_t other) : this() {
      hexes_ = other.hexes_.Clone();
    }

    public capital_t Clone() {
      return new capital_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.capital_hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(10, global::Message.capital_hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.capital_hex_t> hexes_ = new pbc::RepeatedField<global::Message.capital_hex_t>();
    public pbc::RepeatedField<global::Message.capital_hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_t);
    }

    public bool Equals(capital_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(capital_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class offmap_possesions_t : pb::IMessage<offmap_possesions_t> {
    private static readonly pb::MessageParser<offmap_possesions_t> _parser = new pb::MessageParser<offmap_possesions_t>(() => new offmap_possesions_t());
    public static pb::MessageParser<offmap_possesions_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public offmap_possesions_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public offmap_possesions_t(offmap_possesions_t other) : this() {
      provinces_ = other.provinces_;
      mins_ = other.mins_;
      majs_ = other.majs_;
      surveyShips_ = other.surveyShips_;
      cannotBuildOffmapCapital_ = other.cannotBuildOffmapCapital_;
      oldShipyard_ = other.oldShipyard_;
    }

    public offmap_possesions_t Clone() {
      return new offmap_possesions_t(this);
    }

    /// <summary>Field number for the "provinces" field.</summary>
    public const int ProvincesFieldNumber = 1;
    private int provinces_;
    public int Provinces {
      get { return provinces_; }
      set {
        provinces_ = value;
      }
    }

    /// <summary>Field number for the "mins" field.</summary>
    public const int MinsFieldNumber = 2;
    private int mins_;
    public int Mins {
      get { return mins_; }
      set {
        mins_ = value;
      }
    }

    /// <summary>Field number for the "majs" field.</summary>
    public const int MajsFieldNumber = 3;
    private int majs_;
    public int Majs {
      get { return majs_; }
      set {
        majs_ = value;
      }
    }

    /// <summary>Field number for the "survey_ships" field.</summary>
    public const int SurveyShipsFieldNumber = 4;
    private int surveyShips_;
    public int SurveyShips {
      get { return surveyShips_; }
      set {
        surveyShips_ = value;
      }
    }

    /// <summary>Field number for the "cannot_build_offmap_capital" field.</summary>
    public const int CannotBuildOffmapCapitalFieldNumber = 5;
    private int cannotBuildOffmapCapital_;
    public int CannotBuildOffmapCapital {
      get { return cannotBuildOffmapCapital_; }
      set {
        cannotBuildOffmapCapital_ = value;
      }
    }

    /// <summary>Field number for the "old_shipyard" field.</summary>
    public const int OldShipyardFieldNumber = 6;
    private int oldShipyard_;
    public int OldShipyard {
      get { return oldShipyard_; }
      set {
        oldShipyard_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as offmap_possesions_t);
    }

    public bool Equals(offmap_possesions_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provinces != other.Provinces) return false;
      if (Mins != other.Mins) return false;
      if (Majs != other.Majs) return false;
      if (SurveyShips != other.SurveyShips) return false;
      if (CannotBuildOffmapCapital != other.CannotBuildOffmapCapital) return false;
      if (OldShipyard != other.OldShipyard) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Provinces != 0) hash ^= Provinces.GetHashCode();
      if (Mins != 0) hash ^= Mins.GetHashCode();
      if (Majs != 0) hash ^= Majs.GetHashCode();
      if (SurveyShips != 0) hash ^= SurveyShips.GetHashCode();
      if (CannotBuildOffmapCapital != 0) hash ^= CannotBuildOffmapCapital.GetHashCode();
      if (OldShipyard != 0) hash ^= OldShipyard.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Provinces != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Provinces);
      }
      if (Mins != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mins);
      }
      if (Majs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Majs);
      }
      if (SurveyShips != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SurveyShips);
      }
      if (CannotBuildOffmapCapital != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CannotBuildOffmapCapital);
      }
      if (OldShipyard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OldShipyard);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Provinces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Provinces);
      }
      if (Mins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mins);
      }
      if (Majs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Majs);
      }
      if (SurveyShips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurveyShips);
      }
      if (CannotBuildOffmapCapital != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannotBuildOffmapCapital);
      }
      if (OldShipyard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldShipyard);
      }
      return size;
    }

    public void MergeFrom(offmap_possesions_t other) {
      if (other == null) {
        return;
      }
      if (other.Provinces != 0) {
        Provinces = other.Provinces;
      }
      if (other.Mins != 0) {
        Mins = other.Mins;
      }
      if (other.Majs != 0) {
        Majs = other.Majs;
      }
      if (other.SurveyShips != 0) {
        SurveyShips = other.SurveyShips;
      }
      if (other.CannotBuildOffmapCapital != 0) {
        CannotBuildOffmapCapital = other.CannotBuildOffmapCapital;
      }
      if (other.OldShipyard != 0) {
        OldShipyard = other.OldShipyard;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Provinces = input.ReadInt32();
            break;
          }
          case 16: {
            Mins = input.ReadInt32();
            break;
          }
          case 24: {
            Majs = input.ReadInt32();
            break;
          }
          case 32: {
            SurveyShips = input.ReadInt32();
            break;
          }
          case 40: {
            CannotBuildOffmapCapital = input.ReadInt32();
            break;
          }
          case 48: {
            OldShipyard = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class nation_t : pb::IMessage<nation_t> {
    private static readonly pb::MessageParser<nation_t> _parser = new pb::MessageParser<nation_t>(() => new nation_t());
    public static pb::MessageParser<nation_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public nation_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public nation_t(nation_t other) : this() {
      name_ = other.name_;
      shortName_ = other.shortName_;
      Capital = other.capital_ != null ? other.Capital.Clone() : null;
      freeStrategicMoves_ = other.freeStrategicMoves_;
      capitalStarPoints_ = other.capitalStarPoints_;
      OffmapPossesions = other.offmapPossesions_ != null ? other.OffmapPossesions.Clone() : null;
      nationId_ = other.nationId_;
    }

    public nation_t Clone() {
      return new nation_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 2;
    private string shortName_ = "";
    public string ShortName {
      get { return shortName_; }
      set {
        shortName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capital" field.</summary>
    public const int CapitalFieldNumber = 3;
    private global::Message.capital_t capital_;
    public global::Message.capital_t Capital {
      get { return capital_; }
      set {
        capital_ = value;
      }
    }

    /// <summary>Field number for the "free_strategic_moves" field.</summary>
    public const int FreeStrategicMovesFieldNumber = 4;
    private int freeStrategicMoves_;
    public int FreeStrategicMoves {
      get { return freeStrategicMoves_; }
      set {
        freeStrategicMoves_ = value;
      }
    }

    /// <summary>Field number for the "capital_star_points" field.</summary>
    public const int CapitalStarPointsFieldNumber = 5;
    private int capitalStarPoints_;
    public int CapitalStarPoints {
      get { return capitalStarPoints_; }
      set {
        capitalStarPoints_ = value;
      }
    }

    /// <summary>Field number for the "offmap_possesions" field.</summary>
    public const int OffmapPossesionsFieldNumber = 6;
    private global::Message.offmap_possesions_t offmapPossesions_;
    public global::Message.offmap_possesions_t OffmapPossesions {
      get { return offmapPossesions_; }
      set {
        offmapPossesions_ = value;
      }
    }

    /// <summary>Field number for the "nation_id" field.</summary>
    public const int NationIdFieldNumber = 7;
    private int nationId_;
    public int NationId {
      get { return nationId_; }
      set {
        nationId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as nation_t);
    }

    public bool Equals(nation_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortName != other.ShortName) return false;
      if (!object.Equals(Capital, other.Capital)) return false;
      if (FreeStrategicMoves != other.FreeStrategicMoves) return false;
      if (CapitalStarPoints != other.CapitalStarPoints) return false;
      if (!object.Equals(OffmapPossesions, other.OffmapPossesions)) return false;
      if (NationId != other.NationId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortName.Length != 0) hash ^= ShortName.GetHashCode();
      if (capital_ != null) hash ^= Capital.GetHashCode();
      if (FreeStrategicMoves != 0) hash ^= FreeStrategicMoves.GetHashCode();
      if (CapitalStarPoints != 0) hash ^= CapitalStarPoints.GetHashCode();
      if (offmapPossesions_ != null) hash ^= OffmapPossesions.GetHashCode();
      if (NationId != 0) hash ^= NationId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShortName);
      }
      if (capital_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Capital);
      }
      if (FreeStrategicMoves != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeStrategicMoves);
      }
      if (CapitalStarPoints != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CapitalStarPoints);
      }
      if (offmapPossesions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OffmapPossesions);
      }
      if (NationId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NationId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (capital_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capital);
      }
      if (FreeStrategicMoves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeStrategicMoves);
      }
      if (CapitalStarPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CapitalStarPoints);
      }
      if (offmapPossesions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffmapPossesions);
      }
      if (NationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NationId);
      }
      return size;
    }

    public void MergeFrom(nation_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortName.Length != 0) {
        ShortName = other.ShortName;
      }
      if (other.capital_ != null) {
        if (capital_ == null) {
          capital_ = new global::Message.capital_t();
        }
        Capital.MergeFrom(other.Capital);
      }
      if (other.FreeStrategicMoves != 0) {
        FreeStrategicMoves = other.FreeStrategicMoves;
      }
      if (other.CapitalStarPoints != 0) {
        CapitalStarPoints = other.CapitalStarPoints;
      }
      if (other.offmapPossesions_ != null) {
        if (offmapPossesions_ == null) {
          offmapPossesions_ = new global::Message.offmap_possesions_t();
        }
        OffmapPossesions.MergeFrom(other.OffmapPossesions);
      }
      if (other.NationId != 0) {
        NationId = other.NationId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ShortName = input.ReadString();
            break;
          }
          case 26: {
            if (capital_ == null) {
              capital_ = new global::Message.capital_t();
            }
            input.ReadMessage(capital_);
            break;
          }
          case 32: {
            FreeStrategicMoves = input.ReadInt32();
            break;
          }
          case 40: {
            CapitalStarPoints = input.ReadInt32();
            break;
          }
          case 50: {
            if (offmapPossesions_ == null) {
              offmapPossesions_ = new global::Message.offmap_possesions_t();
            }
            input.ReadMessage(offmapPossesions_);
            break;
          }
          case 56: {
            NationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class nations_t : pb::IMessage<nations_t> {
    private static readonly pb::MessageParser<nations_t> _parser = new pb::MessageParser<nations_t>(() => new nations_t());
    public static pb::MessageParser<nations_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public nations_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public nations_t(nations_t other) : this() {
      nations_ = other.nations_.Clone();
    }

    public nations_t Clone() {
      return new nations_t(this);
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.nation_t>.Codec _map_nations_codec
        = new pbc::MapField<string, global::Message.nation_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.nation_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.nation_t> nations_ = new pbc::MapField<string, global::Message.nation_t>();
    public pbc::MapField<string, global::Message.nation_t> Nations {
      get { return nations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as nations_t);
    }

    public bool Equals(nations_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Nations.Equals(other.Nations)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Nations.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      nations_.WriteTo(output, _map_nations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += nations_.CalculateSize(_map_nations_codec);
      return size;
    }

    public void MergeFrom(nations_t other) {
      if (other == null) {
        return;
      }
      nations_.Add(other.nations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nations_.AddEntriesFrom(input, _map_nations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Map messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class hex_t : pb::IMessage<hex_t> {
    private static readonly pb::MessageParser<hex_t> _parser = new pb::MessageParser<hex_t>(() => new hex_t());
    public static pb::MessageParser<hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public hex_t(hex_t other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      owner_ = other.owner_;
      feature_ = other.feature_;
      neutralZoneBordering_ = other.neutralZoneBordering_.Clone();
    }

    public hex_t Clone() {
      return new hex_t(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::Message.hex_coord_t coord_;
    public global::Message.hex_coord_t Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private int owner_;
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 3;
    private global::Message.feature_t feature_ = global::Message.feature_t.none;
    public global::Message.feature_t Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    /// <summary>Field number for the "neutral_zone_bordering" field.</summary>
    public const int NeutralZoneBorderingFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_neutralZoneBordering_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> neutralZoneBordering_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> NeutralZoneBordering {
      get { return neutralZoneBordering_; }
    }

    public override bool Equals(object other) {
      return Equals(other as hex_t);
    }

    public bool Equals(hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (Owner != other.Owner) return false;
      if (Feature != other.Feature) return false;
      if(!neutralZoneBordering_.Equals(other.neutralZoneBordering_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Feature != global::Message.feature_t.none) hash ^= Feature.GetHashCode();
      hash ^= neutralZoneBordering_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Owner);
      }
      if (Feature != global::Message.feature_t.none) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Feature);
      }
      neutralZoneBordering_.WriteTo(output, _repeated_neutralZoneBordering_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (Feature != global::Message.feature_t.none) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Feature);
      }
      size += neutralZoneBordering_.CalculateSize(_repeated_neutralZoneBordering_codec);
      return size;
    }

    public void MergeFrom(hex_t other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::Message.hex_coord_t();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Feature != global::Message.feature_t.none) {
        Feature = other.Feature;
      }
      neutralZoneBordering_.Add(other.neutralZoneBordering_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::Message.hex_coord_t();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 16: {
            Owner = input.ReadInt32();
            break;
          }
          case 24: {
            feature_ = (global::Message.feature_t) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            neutralZoneBordering_.AddEntriesFrom(input, _repeated_neutralZoneBordering_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class province_hex_t : pb::IMessage<province_hex_t> {
    private static readonly pb::MessageParser<province_hex_t> _parser = new pb::MessageParser<province_hex_t>(() => new province_hex_t());
    public static pb::MessageParser<province_hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public province_hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public province_hex_t(province_hex_t other) : this() {
      hex_ = other.hex_;
      feature_ = other.feature_;
    }

    public province_hex_t Clone() {
      return new province_hex_t(this);
    }

    /// <summary>Field number for the "hex" field.</summary>
    public const int HexFieldNumber = 1;
    private int hex_;
    public int Hex {
      get { return hex_; }
      set {
        hex_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 2;
    private global::Message.feature_t feature_ = global::Message.feature_t.none;
    public global::Message.feature_t Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as province_hex_t);
    }

    public bool Equals(province_hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hex != other.Hex) return false;
      if (Feature != other.Feature) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Hex != 0) hash ^= Hex.GetHashCode();
      if (Feature != global::Message.feature_t.none) hash ^= Feature.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Hex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Hex);
      }
      if (Feature != global::Message.feature_t.none) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Feature);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Hex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hex);
      }
      if (Feature != global::Message.feature_t.none) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Feature);
      }
      return size;
    }

    public void MergeFrom(province_hex_t other) {
      if (other == null) {
        return;
      }
      if (other.Hex != 0) {
        Hex = other.Hex;
      }
      if (other.Feature != global::Message.feature_t.none) {
        Feature = other.Feature;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hex = input.ReadInt32();
            break;
          }
          case 16: {
            feature_ = (global::Message.feature_t) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class province_t : pb::IMessage<province_t> {
    private static readonly pb::MessageParser<province_t> _parser = new pb::MessageParser<province_t>(() => new province_t());
    public static pb::MessageParser<province_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public province_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public province_t(province_t other) : this() {
      hexes_ = other.hexes_.Clone();
    }

    public province_t Clone() {
      return new province_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.province_hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(10, global::Message.province_hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.province_hex_t> hexes_ = new pbc::RepeatedField<global::Message.province_hex_t>();
    public pbc::RepeatedField<global::Message.province_hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as province_t);
    }

    public bool Equals(province_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(province_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  How the offmap region (if any) is connected to the map.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class offmap_area_t : pb::IMessage<offmap_area_t> {
    private static readonly pb::MessageParser<offmap_area_t> _parser = new pb::MessageParser<offmap_area_t>(() => new offmap_area_t());
    public static pb::MessageParser<offmap_area_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public offmap_area_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public offmap_area_t(offmap_area_t other) : this() {
      name_ = other.name_;
      features_ = other.features_.Clone();
      counterHex_ = other.counterHex_;
      adjacentHexes_ = other.adjacentHexes_.Clone();
    }

    public offmap_area_t Clone() {
      return new offmap_area_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.feature_t> _repeated_features_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Message.feature_t) x);
    private readonly pbc::RepeatedField<global::Message.feature_t> features_ = new pbc::RepeatedField<global::Message.feature_t>();
    public pbc::RepeatedField<global::Message.feature_t> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "counter_hex" field.</summary>
    public const int CounterHexFieldNumber = 3;
    private int counterHex_;
    /// <summary>
    ///  Where the SB counter is chown, if any.
    /// </summary>
    public int CounterHex {
      get { return counterHex_; }
      set {
        counterHex_ = value;
      }
    }

    /// <summary>Field number for the "adjacent_hexes" field.</summary>
    public const int AdjacentHexesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_adjacentHexes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> adjacentHexes_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> AdjacentHexes {
      get { return adjacentHexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as offmap_area_t);
    }

    public bool Equals(offmap_area_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!features_.Equals(other.features_)) return false;
      if (CounterHex != other.CounterHex) return false;
      if(!adjacentHexes_.Equals(other.adjacentHexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= features_.GetHashCode();
      if (CounterHex != 0) hash ^= CounterHex.GetHashCode();
      hash ^= adjacentHexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      features_.WriteTo(output, _repeated_features_codec);
      if (CounterHex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CounterHex);
      }
      adjacentHexes_.WriteTo(output, _repeated_adjacentHexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      if (CounterHex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CounterHex);
      }
      size += adjacentHexes_.CalculateSize(_repeated_adjacentHexes_codec);
      return size;
    }

    public void MergeFrom(offmap_area_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      features_.Add(other.features_);
      if (other.CounterHex != 0) {
        CounterHex = other.CounterHex;
      }
      adjacentHexes_.Add(other.adjacentHexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 24: {
            CounterHex = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            adjacentHexes_.AddEntriesFrom(input, _repeated_adjacentHexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class starting_national_holdings_t : pb::IMessage<starting_national_holdings_t> {
    private static readonly pb::MessageParser<starting_national_holdings_t> _parser = new pb::MessageParser<starting_national_holdings_t>(() => new starting_national_holdings_t());
    public static pb::MessageParser<starting_national_holdings_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public starting_national_holdings_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public starting_national_holdings_t(starting_national_holdings_t other) : this() {
      provinces_ = other.provinces_.Clone();
      OffmapArea = other.offmapArea_ != null ? other.OffmapArea.Clone() : null;
    }

    public starting_national_holdings_t Clone() {
      return new starting_national_holdings_t(this);
    }

    /// <summary>Field number for the "provinces" field.</summary>
    public const int ProvincesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.province_t> _repeated_provinces_codec
        = pb::FieldCodec.ForMessage(10, global::Message.province_t.Parser);
    private readonly pbc::RepeatedField<global::Message.province_t> provinces_ = new pbc::RepeatedField<global::Message.province_t>();
    public pbc::RepeatedField<global::Message.province_t> Provinces {
      get { return provinces_; }
    }

    /// <summary>Field number for the "offmap_area" field.</summary>
    public const int OffmapAreaFieldNumber = 2;
    private global::Message.offmap_area_t offmapArea_;
    public global::Message.offmap_area_t OffmapArea {
      get { return offmapArea_; }
      set {
        offmapArea_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as starting_national_holdings_t);
    }

    public bool Equals(starting_national_holdings_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!provinces_.Equals(other.provinces_)) return false;
      if (!object.Equals(OffmapArea, other.OffmapArea)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= provinces_.GetHashCode();
      if (offmapArea_ != null) hash ^= OffmapArea.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      provinces_.WriteTo(output, _repeated_provinces_codec);
      if (offmapArea_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffmapArea);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += provinces_.CalculateSize(_repeated_provinces_codec);
      if (offmapArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffmapArea);
      }
      return size;
    }

    public void MergeFrom(starting_national_holdings_t other) {
      if (other == null) {
        return;
      }
      provinces_.Add(other.provinces_);
      if (other.offmapArea_ != null) {
        if (offmapArea_ == null) {
          offmapArea_ = new global::Message.offmap_area_t();
        }
        OffmapArea.MergeFrom(other.OffmapArea);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            provinces_.AddEntriesFrom(input, _repeated_provinces_codec);
            break;
          }
          case 18: {
            if (offmapArea_ == null) {
              offmapArea_ = new global::Message.offmap_area_t();
            }
            input.ReadMessage(offmapArea_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class map_t : pb::IMessage<map_t> {
    private static readonly pb::MessageParser<map_t> _parser = new pb::MessageParser<map_t>(() => new map_t());
    public static pb::MessageParser<map_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public map_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public map_t(map_t other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      nzPlanets_ = other.nzPlanets_.Clone();
      nzHexes_ = other.nzHexes_.Clone();
      startingNationalHoldings_ = other.startingNationalHoldings_.Clone();
      hexes_ = other.hexes_.Clone();
    }

    public map_t Clone() {
      return new map_t(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "nz_planets" field.</summary>
    public const int NzPlanetsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_nzPlanets_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> nzPlanets_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  only in starting data (all planets are MIN)
    /// </summary>
    public pbc::RepeatedField<int> NzPlanets {
      get { return nzPlanets_; }
    }

    /// <summary>Field number for the "nz_hexes" field.</summary>
    public const int NzHexesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_nzHexes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> nzHexes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  only in starting data
    /// </summary>
    public pbc::RepeatedField<int> NzHexes {
      get { return nzHexes_; }
    }

    /// <summary>Field number for the "starting_national_holdings" field.</summary>
    public const int StartingNationalHoldingsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Message.starting_national_holdings_t>.Codec _map_startingNationalHoldings_codec
        = new pbc::MapField<string, global::Message.starting_national_holdings_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.starting_national_holdings_t.Parser), 42);
    private readonly pbc::MapField<string, global::Message.starting_national_holdings_t> startingNationalHoldings_ = new pbc::MapField<string, global::Message.starting_national_holdings_t>();
    public pbc::MapField<string, global::Message.starting_national_holdings_t> StartingNationalHoldings {
      get { return startingNationalHoldings_; }
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Message.hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(50, global::Message.hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.hex_t> hexes_ = new pbc::RepeatedField<global::Message.hex_t>();
    /// <summary>
    ///  only in saved data
    /// </summary>
    public pbc::RepeatedField<global::Message.hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as map_t);
    }

    public bool Equals(map_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!nzPlanets_.Equals(other.nzPlanets_)) return false;
      if(!nzHexes_.Equals(other.nzHexes_)) return false;
      if (!StartingNationalHoldings.Equals(other.StartingNationalHoldings)) return false;
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= nzPlanets_.GetHashCode();
      hash ^= nzHexes_.GetHashCode();
      hash ^= StartingNationalHoldings.GetHashCode();
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      nzPlanets_.WriteTo(output, _repeated_nzPlanets_codec);
      nzHexes_.WriteTo(output, _repeated_nzHexes_codec);
      startingNationalHoldings_.WriteTo(output, _map_startingNationalHoldings_codec);
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += nzPlanets_.CalculateSize(_repeated_nzPlanets_codec);
      size += nzHexes_.CalculateSize(_repeated_nzHexes_codec);
      size += startingNationalHoldings_.CalculateSize(_map_startingNationalHoldings_codec);
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(map_t other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      nzPlanets_.Add(other.nzPlanets_);
      nzHexes_.Add(other.nzHexes_);
      startingNationalHoldings_.Add(other.startingNationalHoldings_);
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            nzPlanets_.AddEntriesFrom(input, _repeated_nzPlanets_codec);
            break;
          }
          case 34:
          case 32: {
            nzHexes_.AddEntriesFrom(input, _repeated_nzHexes_codec);
            break;
          }
          case 42: {
            startingNationalHoldings_.AddEntriesFrom(input, _map_startingNationalHoldings_codec);
            break;
          }
          case 50: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Game model (as in Model-View-Controller)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class model_t : pb::IMessage<model_t> {
    private static readonly pb::MessageParser<model_t> _parser = new pb::MessageParser<model_t>(() => new model_t());
    public static pb::MessageParser<model_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public model_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public model_t(model_t other) : this() {
      Nations = other.nations_ != null ? other.Nations.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
    }

    public model_t Clone() {
      return new model_t(this);
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 1;
    private global::Message.nations_t nations_;
    public global::Message.nations_t Nations {
      get { return nations_; }
      set {
        nations_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 2;
    private global::Message.map_t map_;
    public global::Message.map_t Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as model_t);
    }

    public bool Equals(model_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nations, other.Nations)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (nations_ != null) hash ^= Nations.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (nations_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nations);
      }
      if (map_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Map);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (nations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nations);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      return size;
    }

    public void MergeFrom(model_t other) {
      if (other == null) {
        return;
      }
      if (other.nations_ != null) {
        if (nations_ == null) {
          nations_ = new global::Message.nations_t();
        }
        Nations.MergeFrom(other.Nations);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::Message.map_t();
        }
        Map.MergeFrom(other.Map);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nations_ == null) {
              nations_ = new global::Message.nations_t();
            }
            input.ReadMessage(nations_);
            break;
          }
          case 18: {
            if (map_ == null) {
              map_ = new global::Message.map_t();
            }
            input.ReadMessage(map_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Order of Battle messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class oob_unit_t : pb::IMessage<oob_unit_t> {
    private static readonly pb::MessageParser<oob_unit_t> _parser = new pb::MessageParser<oob_unit_t>(() => new oob_unit_t());
    public static pb::MessageParser<oob_unit_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public oob_unit_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public oob_unit_t(oob_unit_t other) : this() {
      unit_ = other.unit_;
      times_ = other.times_;
    }

    public oob_unit_t Clone() {
      return new oob_unit_t(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private string unit_ = "";
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///  "times: 2", "times: 3", etc. -- omission implies x1
    /// </summary>
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as oob_unit_t);
    }

    public bool Equals(oob_unit_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (Times != other.Times) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Unit.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Unit);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    public void MergeFrom(oob_unit_t other) {
      if (other == null) {
        return;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Unit = input.ReadString();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class production_element_t : pb::IMessage<production_element_t> {
    private static readonly pb::MessageParser<production_element_t> _parser = new pb::MessageParser<production_element_t>(() => new production_element_t());
    public static pb::MessageParser<production_element_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public production_element_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public production_element_t(production_element_t other) : this() {
      year_ = other.year_;
      season_ = other.season_;
      units_ = other.units_.Clone();
    }

    public production_element_t Clone() {
      return new production_element_t(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 2;
    private global::Message.season_t season_ = global::Message.season_t.spring;
    public global::Message.season_t Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(26, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    public override bool Equals(object other) {
      return Equals(other as production_element_t);
    }

    public bool Equals(production_element_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Season != other.Season) return false;
      if(!units_.Equals(other.units_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Season != global::Message.season_t.spring) hash ^= Season.GetHashCode();
      hash ^= units_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Season != global::Message.season_t.spring) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Season);
      }
      units_.WriteTo(output, _repeated_units_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Season != global::Message.season_t.spring) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Season);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(production_element_t other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Season != global::Message.season_t.spring) {
        Season = other.Season;
      }
      units_.Add(other.units_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            season_ = (global::Message.season_t) input.ReadEnum();
            break;
          }
          case 26: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class starting_fleet_t : pb::IMessage<starting_fleet_t> {
    private static readonly pb::MessageParser<starting_fleet_t> _parser = new pb::MessageParser<starting_fleet_t>(() => new starting_fleet_t());
    public static pb::MessageParser<starting_fleet_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public starting_fleet_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public starting_fleet_t(starting_fleet_t other) : this() {
      hexes_ = other.hexes_.Clone();
      units_ = other.units_.Clone();
      reserve_ = other.reserve_;
      prewarConstruction_ = other.prewarConstruction_.Clone();
      strategicMoveArrivalYear_ = other.strategicMoveArrivalYear_;
      strategicMoveArrivalSeason_ = other.strategicMoveArrivalSeason_;
      hexPlacementLimits_ = other.hexPlacementLimits_.Clone();
    }

    public starting_fleet_t Clone() {
      return new starting_fleet_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hexes_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hexes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  empty indicates offmap
    /// </summary>
    public pbc::RepeatedField<int> Hexes {
      get { return hexes_; }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "reserve" field.</summary>
    public const int ReserveFieldNumber = 3;
    private int reserve_;
    /// <summary>
    ///  integer acting as boolean
    /// </summary>
    public int Reserve {
      get { return reserve_; }
      set {
        reserve_ = value;
      }
    }

    /// <summary>Field number for the "prewar_construction" field.</summary>
    public const int PrewarConstructionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Message.production_element_t> _repeated_prewarConstruction_codec
        = pb::FieldCodec.ForMessage(34, global::Message.production_element_t.Parser);
    private readonly pbc::RepeatedField<global::Message.production_element_t> prewarConstruction_ = new pbc::RepeatedField<global::Message.production_element_t>();
    public pbc::RepeatedField<global::Message.production_element_t> PrewarConstruction {
      get { return prewarConstruction_; }
    }

    /// <summary>Field number for the "strategic_move_arrival_year" field.</summary>
    public const int StrategicMoveArrivalYearFieldNumber = 5;
    private int strategicMoveArrivalYear_;
    public int StrategicMoveArrivalYear {
      get { return strategicMoveArrivalYear_; }
      set {
        strategicMoveArrivalYear_ = value;
      }
    }

    /// <summary>Field number for the "strategic_move_arrival_season" field.</summary>
    public const int StrategicMoveArrivalSeasonFieldNumber = 6;
    private global::Message.season_t strategicMoveArrivalSeason_ = global::Message.season_t.spring;
    public global::Message.season_t StrategicMoveArrivalSeason {
      get { return strategicMoveArrivalSeason_; }
      set {
        strategicMoveArrivalSeason_ = value;
      }
    }

    /// <summary>Field number for the "hex_placement_limits" field.</summary>
    public const int HexPlacementLimitsFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_hexPlacementLimits_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
    private readonly pbc::MapField<int, int> hexPlacementLimits_ = new pbc::MapField<int, int>();
    /// <summary>
    ///  hex coord to unit limit
    /// </summary>
    public pbc::MapField<int, int> HexPlacementLimits {
      get { return hexPlacementLimits_; }
    }

    public override bool Equals(object other) {
      return Equals(other as starting_fleet_t);
    }

    public bool Equals(starting_fleet_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      if(!units_.Equals(other.units_)) return false;
      if (Reserve != other.Reserve) return false;
      if(!prewarConstruction_.Equals(other.prewarConstruction_)) return false;
      if (StrategicMoveArrivalYear != other.StrategicMoveArrivalYear) return false;
      if (StrategicMoveArrivalSeason != other.StrategicMoveArrivalSeason) return false;
      if (!HexPlacementLimits.Equals(other.HexPlacementLimits)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      hash ^= units_.GetHashCode();
      if (Reserve != 0) hash ^= Reserve.GetHashCode();
      hash ^= prewarConstruction_.GetHashCode();
      if (StrategicMoveArrivalYear != 0) hash ^= StrategicMoveArrivalYear.GetHashCode();
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) hash ^= StrategicMoveArrivalSeason.GetHashCode();
      hash ^= HexPlacementLimits.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
      units_.WriteTo(output, _repeated_units_codec);
      if (Reserve != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reserve);
      }
      prewarConstruction_.WriteTo(output, _repeated_prewarConstruction_codec);
      if (StrategicMoveArrivalYear != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StrategicMoveArrivalYear);
      }
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        output.WriteRawTag(48);
        output.WriteEnum((int) StrategicMoveArrivalSeason);
      }
      hexPlacementLimits_.WriteTo(output, _map_hexPlacementLimits_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      size += units_.CalculateSize(_repeated_units_codec);
      if (Reserve != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserve);
      }
      size += prewarConstruction_.CalculateSize(_repeated_prewarConstruction_codec);
      if (StrategicMoveArrivalYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrategicMoveArrivalYear);
      }
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StrategicMoveArrivalSeason);
      }
      size += hexPlacementLimits_.CalculateSize(_map_hexPlacementLimits_codec);
      return size;
    }

    public void MergeFrom(starting_fleet_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
      units_.Add(other.units_);
      if (other.Reserve != 0) {
        Reserve = other.Reserve;
      }
      prewarConstruction_.Add(other.prewarConstruction_);
      if (other.StrategicMoveArrivalYear != 0) {
        StrategicMoveArrivalYear = other.StrategicMoveArrivalYear;
      }
      if (other.StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        StrategicMoveArrivalSeason = other.StrategicMoveArrivalSeason;
      }
      hexPlacementLimits_.Add(other.hexPlacementLimits_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 24: {
            Reserve = input.ReadInt32();
            break;
          }
          case 34: {
            prewarConstruction_.AddEntriesFrom(input, _repeated_prewarConstruction_codec);
            break;
          }
          case 40: {
            StrategicMoveArrivalYear = input.ReadInt32();
            break;
          }
          case 48: {
            strategicMoveArrivalSeason_ = (global::Message.season_t) input.ReadEnum();
            break;
          }
          case 58: {
            hexPlacementLimits_.AddEntriesFrom(input, _map_hexPlacementLimits_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mothball_reserve_t : pb::IMessage<mothball_reserve_t> {
    private static readonly pb::MessageParser<mothball_reserve_t> _parser = new pb::MessageParser<mothball_reserve_t>(() => new mothball_reserve_t());
    public static pb::MessageParser<mothball_reserve_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public mothball_reserve_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public mothball_reserve_t(mothball_reserve_t other) : this() {
      units_ = other.units_.Clone();
      warRelease_ = other.warRelease_.Clone();
      limitedWarRelease_ = other.limitedWarRelease_.Clone();
    }

    public mothball_reserve_t Clone() {
      return new mothball_reserve_t(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "war_release" field.</summary>
    public const int WarReleaseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_warRelease_codec
        = pb::FieldCodec.ForMessage(18, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> warRelease_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> WarRelease {
      get { return warRelease_; }
    }

    /// <summary>Field number for the "limited_war_release" field.</summary>
    public const int LimitedWarReleaseFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_limitedWarRelease_codec
        = pb::FieldCodec.ForMessage(26, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> limitedWarRelease_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> LimitedWarRelease {
      get { return limitedWarRelease_; }
    }

    public override bool Equals(object other) {
      return Equals(other as mothball_reserve_t);
    }

    public bool Equals(mothball_reserve_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!units_.Equals(other.units_)) return false;
      if(!warRelease_.Equals(other.warRelease_)) return false;
      if(!limitedWarRelease_.Equals(other.limitedWarRelease_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= units_.GetHashCode();
      hash ^= warRelease_.GetHashCode();
      hash ^= limitedWarRelease_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      warRelease_.WriteTo(output, _repeated_warRelease_codec);
      limitedWarRelease_.WriteTo(output, _repeated_limitedWarRelease_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      size += warRelease_.CalculateSize(_repeated_warRelease_codec);
      size += limitedWarRelease_.CalculateSize(_repeated_limitedWarRelease_codec);
      return size;
    }

    public void MergeFrom(mothball_reserve_t other) {
      if (other == null) {
        return;
      }
      units_.Add(other.units_);
      warRelease_.Add(other.warRelease_);
      limitedWarRelease_.Add(other.limitedWarRelease_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 18: {
            warRelease_.AddEntriesFrom(input, _repeated_warRelease_codec);
            break;
          }
          case 26: {
            limitedWarRelease_.AddEntriesFrom(input, _repeated_limitedWarRelease_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  TODO Special production rules
  ///  TODO Production notes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class order_of_battle_t : pb::IMessage<order_of_battle_t> {
    private static readonly pb::MessageParser<order_of_battle_t> _parser = new pb::MessageParser<order_of_battle_t>(() => new order_of_battle_t());
    public static pb::MessageParser<order_of_battle_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public order_of_battle_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public order_of_battle_t(order_of_battle_t other) : this() {
      startingFleets_ = other.startingFleets_.Clone();
      MothballReserve = other.mothballReserve_ != null ? other.MothballReserve.Clone() : null;
      production_ = other.production_.Clone();
    }

    public order_of_battle_t Clone() {
      return new order_of_battle_t(this);
    }

    /// <summary>Field number for the "starting_fleets" field.</summary>
    public const int StartingFleetsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.starting_fleet_t>.Codec _map_startingFleets_codec
        = new pbc::MapField<string, global::Message.starting_fleet_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.starting_fleet_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.starting_fleet_t> startingFleets_ = new pbc::MapField<string, global::Message.starting_fleet_t>();
    public pbc::MapField<string, global::Message.starting_fleet_t> StartingFleets {
      get { return startingFleets_; }
    }

    /// <summary>Field number for the "mothball_reserve" field.</summary>
    public const int MothballReserveFieldNumber = 2;
    private global::Message.mothball_reserve_t mothballReserve_;
    public global::Message.mothball_reserve_t MothballReserve {
      get { return mothballReserve_; }
      set {
        mothballReserve_ = value;
      }
    }

    /// <summary>Field number for the "production" field.</summary>
    public const int ProductionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.production_element_t> _repeated_production_codec
        = pb::FieldCodec.ForMessage(26, global::Message.production_element_t.Parser);
    private readonly pbc::RepeatedField<global::Message.production_element_t> production_ = new pbc::RepeatedField<global::Message.production_element_t>();
    public pbc::RepeatedField<global::Message.production_element_t> Production {
      get { return production_; }
    }

    public override bool Equals(object other) {
      return Equals(other as order_of_battle_t);
    }

    public bool Equals(order_of_battle_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!StartingFleets.Equals(other.StartingFleets)) return false;
      if (!object.Equals(MothballReserve, other.MothballReserve)) return false;
      if(!production_.Equals(other.production_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= StartingFleets.GetHashCode();
      if (mothballReserve_ != null) hash ^= MothballReserve.GetHashCode();
      hash ^= production_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      startingFleets_.WriteTo(output, _map_startingFleets_codec);
      if (mothballReserve_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MothballReserve);
      }
      production_.WriteTo(output, _repeated_production_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += startingFleets_.CalculateSize(_map_startingFleets_codec);
      if (mothballReserve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MothballReserve);
      }
      size += production_.CalculateSize(_repeated_production_codec);
      return size;
    }

    public void MergeFrom(order_of_battle_t other) {
      if (other == null) {
        return;
      }
      startingFleets_.Add(other.startingFleets_);
      if (other.mothballReserve_ != null) {
        if (mothballReserve_ == null) {
          mothballReserve_ = new global::Message.mothball_reserve_t();
        }
        MothballReserve.MergeFrom(other.MothballReserve);
      }
      production_.Add(other.production_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            startingFleets_.AddEntriesFrom(input, _map_startingFleets_codec);
            break;
          }
          case 18: {
            if (mothballReserve_ == null) {
              mothballReserve_ = new global::Message.mothball_reserve_t();
            }
            input.ReadMessage(mothballReserve_);
            break;
          }
          case 26: {
            production_.AddEntriesFrom(input, _repeated_production_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class orders_of_battle_t : pb::IMessage<orders_of_battle_t> {
    private static readonly pb::MessageParser<orders_of_battle_t> _parser = new pb::MessageParser<orders_of_battle_t>(() => new orders_of_battle_t());
    public static pb::MessageParser<orders_of_battle_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public orders_of_battle_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public orders_of_battle_t(orders_of_battle_t other) : this() {
      oobs_ = other.oobs_.Clone();
    }

    public orders_of_battle_t Clone() {
      return new orders_of_battle_t(this);
    }

    /// <summary>Field number for the "oobs" field.</summary>
    public const int OobsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.order_of_battle_t>.Codec _map_oobs_codec
        = new pbc::MapField<string, global::Message.order_of_battle_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.order_of_battle_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.order_of_battle_t> oobs_ = new pbc::MapField<string, global::Message.order_of_battle_t>();
    public pbc::MapField<string, global::Message.order_of_battle_t> Oobs {
      get { return oobs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as orders_of_battle_t);
    }

    public bool Equals(orders_of_battle_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Oobs.Equals(other.Oobs)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Oobs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      oobs_.WriteTo(output, _map_oobs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += oobs_.CalculateSize(_map_oobs_codec);
      return size;
    }

    public void MergeFrom(orders_of_battle_t other) {
      if (other == null) {
        return;
      }
      oobs_.Add(other.oobs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            oobs_.AddEntriesFrom(input, _map_oobs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
