// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Message {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxIHbWVzc2FnZSI5CgZ0dXJuX3QSDAoEeWVhchgBIAEo",
            "BRIhCgZzZWFzb24YAiABKA4yES5tZXNzYWdlLnNlYXNvbl90IiMKC2hleF9j",
            "b29yZF90EgkKAXgYASABKAUSCQoBeRgCIAEoBSJMChJjYXBpdGFsX2hleF96",
            "b25lX3QSDAoEbmFtZRgBIAEoCRIoCghmZWF0dXJlcxgCIAMoDjISLm1lc3Nh",
            "Z2UuZmVhdHVyZV90QgIQASJKCg1jYXBpdGFsX2hleF90Eg0KBWNvb3JkGAEg",
            "ASgFEioKBXpvbmVzGAIgAygLMhsubWVzc2FnZS5jYXBpdGFsX2hleF96b25l",
            "X3QiMgoJY2FwaXRhbF90EiUKBWhleGVzGAEgAygLMhYubWVzc2FnZS5jYXBp",
            "dGFsX2hleF90IpUBChNvZmZtYXBfcG9zc2VzaW9uc190EhEKCXByb3ZpbmNl",
            "cxgBIAEoBRIMCgRtaW5zGAIgASgFEgwKBG1hanMYAyABKAUSFAoMc3VydmV5",
            "X3NoaXBzGAQgASgFEiMKG2Nhbm5vdF9idWlsZF9vZmZtYXBfY2FwaXRhbBgF",
            "IAEoCBIUCgxvbGRfc2hpcHlhcmQYBiABKAgi2AEKCG5hdGlvbl90EgwKBG5h",
            "bWUYASABKAkSEgoKc2hvcnRfbmFtZRgCIAEoCRIjCgdjYXBpdGFsGAMgASgL",
            "MhIubWVzc2FnZS5jYXBpdGFsX3QSHAoUZnJlZV9zdHJhdGVnaWNfbW92ZXMY",
            "BCABKAUSGwoTY2FwaXRhbF9zdGFyX3BvaW50cxgFIAEoBRI3ChFvZmZtYXBf",
            "cG9zc2VzaW9ucxgGIAEoCzIcLm1lc3NhZ2Uub2ZmbWFwX3Bvc3Nlc2lvbnNf",
            "dBIRCgluYXRpb25faWQYByABKAUigAEKCW5hdGlvbnNfdBIwCgduYXRpb25z",
            "GAEgAygLMh8ubWVzc2FnZS5uYXRpb25zX3QuTmF0aW9uc0VudHJ5GkEKDE5h",
            "dGlvbnNFbnRyeRILCgNrZXkYASABKAkSIAoFdmFsdWUYAiABKAsyES5tZXNz",
            "YWdlLm5hdGlvbl90OgI4ASKEAQoFaGV4X3QSIwoFY29vcmQYASABKAsyFC5t",
            "ZXNzYWdlLmhleF9jb29yZF90Eg0KBW93bmVyGAIgASgFEiMKB2ZlYXR1cmUY",
            "AyABKA4yEi5tZXNzYWdlLmZlYXR1cmVfdBIiChZuZXV0cmFsX3pvbmVfYm9y",
            "ZGVyaW5nGAQgAygFQgIQASJCCg5wcm92aW5jZV9oZXhfdBILCgNoZXgYASAB",
            "KAUSIwoHZmVhdHVyZRgCIAEoDjISLm1lc3NhZ2UuZmVhdHVyZV90IjQKCnBy",
            "b3ZpbmNlX3QSJgoFaGV4ZXMYASADKAsyFy5tZXNzYWdlLnByb3ZpbmNlX2hl",
            "eF90IngKDW9mZm1hcF9hcmVhX3QSDAoEbmFtZRgBIAEoCRIoCghmZWF0dXJl",
            "cxgCIAMoDjISLm1lc3NhZ2UuZmVhdHVyZV90QgIQARITCgtjb3VudGVyX2hl",
            "eBgDIAEoBRIaCg5hZGphY2VudF9oZXhlcxgEIAMoBUICEAEicwocc3RhcnRp",
            "bmdfbmF0aW9uYWxfaG9sZGluZ3NfdBImCglwcm92aW5jZXMYASADKAsyEy5t",
            "ZXNzYWdlLnByb3ZpbmNlX3QSKwoLb2ZmbWFwX2FyZWEYAiABKAsyFi5tZXNz",
            "YWdlLm9mZm1hcF9hcmVhX3QirQIKBW1hcF90Eg0KBXdpZHRoGAEgASgFEg4K",
            "BmhlaWdodBgCIAEoBRIWCgpuel9wbGFuZXRzGAMgAygFQgIQARIUCghuel9o",
            "ZXhlcxgEIAMoBUICEAESUAoac3RhcnRpbmdfbmF0aW9uYWxfaG9sZGluZ3MY",
            "BSADKAsyLC5tZXNzYWdlLm1hcF90LlN0YXJ0aW5nTmF0aW9uYWxIb2xkaW5n",
            "c0VudHJ5Eh0KBWhleGVzGAYgAygLMg4ubWVzc2FnZS5oZXhfdBpmCh1TdGFy",
            "dGluZ05hdGlvbmFsSG9sZGluZ3NFbnRyeRILCgNrZXkYASABKAkSNAoFdmFs",
            "dWUYAiABKAsyJS5tZXNzYWdlLnN0YXJ0aW5nX25hdGlvbmFsX2hvbGRpbmdz",
            "X3Q6AjgBIksKB21vZGVsX3QSIwoHbmF0aW9ucxgBIAEoCzISLm1lc3NhZ2Uu",
            "bmF0aW9uc190EhsKA21hcBgCIAEoCzIOLm1lc3NhZ2UubWFwX3QiKQoKb29i",
            "X3VuaXRfdBIMCgR1bml0GAEgASgJEg0KBXRpbWVzGAIgASgFImsKFHByb2R1",
            "Y3Rpb25fZWxlbWVudF90EgwKBHllYXIYASABKAUSIQoGc2Vhc29uGAIgASgO",
            "MhEubWVzc2FnZS5zZWFzb25fdBIiCgV1bml0cxgDIAMoCzITLm1lc3NhZ2Uu",
            "b29iX3VuaXRfdCKBAwoQc3RhcnRpbmdfZmxlZXRfdBIRCgVoZXhlcxgBIAMo",
            "BUICEAESIgoFdW5pdHMYAiADKAsyEy5tZXNzYWdlLm9vYl91bml0X3QSDwoH",
            "cmVzZXJ2ZRgDIAEoCBI6ChNwcmV3YXJfY29uc3RydWN0aW9uGAQgAygLMh0u",
            "bWVzc2FnZS5wcm9kdWN0aW9uX2VsZW1lbnRfdBIjChtzdHJhdGVnaWNfbW92",
            "ZV9hcnJpdmFsX3llYXIYBSABKAUSOAodc3RyYXRlZ2ljX21vdmVfYXJyaXZh",
            "bF9zZWFzb24YBiABKA4yES5tZXNzYWdlLnNlYXNvbl90Ek8KFGhleF9wbGFj",
            "ZW1lbnRfbGltaXRzGAcgAygLMjEubWVzc2FnZS5zdGFydGluZ19mbGVldF90",
            "LkhleFBsYWNlbWVudExpbWl0c0VudHJ5GjkKF0hleFBsYWNlbWVudExpbWl0",
            "c0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEilAEKEm1v",
            "dGhiYWxsX3Jlc2VydmVfdBIiCgV1bml0cxgBIAMoCzITLm1lc3NhZ2Uub29i",
            "X3VuaXRfdBIoCgt3YXJfcmVsZWFzZRgCIAMoCzITLm1lc3NhZ2Uub29iX3Vu",
            "aXRfdBIwChNsaW1pdGVkX3dhcl9yZWxlYXNlGAMgAygLMhMubWVzc2FnZS5v",
            "b2JfdW5pdF90IpgCChFvcmRlcl9vZl9iYXR0bGVfdBJHCg9zdGFydGluZ19m",
            "bGVldHMYASADKAsyLi5tZXNzYWdlLm9yZGVyX29mX2JhdHRsZV90LlN0YXJ0",
            "aW5nRmxlZXRzRW50cnkSNQoQbW90aGJhbGxfcmVzZXJ2ZRgCIAEoCzIbLm1l",
            "c3NhZ2UubW90aGJhbGxfcmVzZXJ2ZV90EjEKCnByb2R1Y3Rpb24YAyADKAsy",
            "HS5tZXNzYWdlLnByb2R1Y3Rpb25fZWxlbWVudF90GlAKE1N0YXJ0aW5nRmxl",
            "ZXRzRW50cnkSCwoDa2V5GAEgASgJEigKBXZhbHVlGAIgASgLMhkubWVzc2Fn",
            "ZS5zdGFydGluZ19mbGVldF90OgI4ASKSAQoSb3JkZXJzX29mX2JhdHRsZV90",
            "EjMKBG9vYnMYASADKAsyJS5tZXNzYWdlLm9yZGVyc19vZl9iYXR0bGVfdC5P",
            "b2JzRW50cnkaRwoJT29ic0VudHJ5EgsKA2tleRgBIAEoCRIpCgV2YWx1ZRgC",
            "IAEoCzIaLm1lc3NhZ2Uub3JkZXJfb2ZfYmF0dGxlX3Q6AjgBIsQBCg91bml0",
            "X2RlZl9zaWRlX3QSCwoDYXR0GAEgASgCEgsKA2RlZhgCIAEoAhINCgVzY291",
            "dBgDIAEoCBIQCghmaWdodGVycxgEIAEoAhIbChNoZWF2eV9maWdodGVyX2Jv",
            "bnVzGAUgASgCEgsKA3BmcxgGIAEoBRIOCgZkcm9uZXMYByABKAUSDgoGbWF1",
            "bGVyGAggASgIEiwKDHR1Z19taXNzaW9ucxgJIAMoDjIWLm1lc3NhZ2UudHVn",
            "X21pc3Npb25fdCI4Cgl0b3dhYmxlX3QSEQoJbW92ZV9jb3N0GAEgASgFEhgK",
            "EHN0cmF0X21vdmVfbGltaXQYAiABKAUiNwoRcHJvZHVjdGlvbl9jb3N0X3QS",
            "DAoEY29zdBgBIAEoBRIUCgxmaWdodGVyX2Nvc3QYAiABKAUi4AUKCnVuaXRf",
            "ZGVmX3QSDAoEbmFtZRgBIAEoCRILCgNjbWQYAiABKAUSLAoKdW5jcmlwcGxl",
            "ZBgDIAEoCzIYLm1lc3NhZ2UudW5pdF9kZWZfc2lkZV90EioKCGNyaXBwbGVk",
            "GAQgASgLMhgubWVzc2FnZS51bml0X2RlZl9zaWRlX3QSKwoLZXNjb3J0X3R5",
            "cGUYBSABKA4yFi5tZXNzYWdlLmVzY29ydF90eXBlX3QSIgoJYXZhaWxhYmxl",
            "GAYgASgLMg8ubWVzc2FnZS50dXJuX3QSCwoDcG9kGAcgASgIEhYKDm1heF9p",
            "bl9zZXJ2aWNlGAggASgFEjAKDGNvbnN0cnVjdGlvbhgJIAEoCzIaLm1lc3Nh",
            "Z2UucHJvZHVjdGlvbl9jb3N0X3QSPQoNc3Vic3RpdHV0aW9ucxgKIAMoCzIm",
            "Lm1lc3NhZ2UudW5pdF9kZWZfdC5TdWJzdGl0dXRpb25zRW50cnkSOQoLY29u",
            "dmVyc2lvbnMYCyADKAsyJC5tZXNzYWdlLnVuaXRfZGVmX3QuQ29udmVyc2lv",
            "bnNFbnRyeRIMCgRtb3ZlGAwgASgFEi0KDGNhcnJpZXJfdHlwZRgNIAEoDjIX",
            "Lm1lc3NhZ2UuY2Fycmllcl90eXBlX3QSFwoPbm90X3NwYWNld29ydGh5GA4g",
            "ASgIEiMKB3Rvd2FibGUYDyABKAsyEi5tZXNzYWdlLnRvd2FibGVfdBIPCgdz",
            "YWx2YWdlGBAgASgFEg0KBW5vdGVzGBEgASgJGlAKElN1YnN0aXR1dGlvbnNF",
            "bnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiABKAsyGi5tZXNzYWdlLnBy",
            "b2R1Y3Rpb25fY29zdF90OgI4ARpOChBDb252ZXJzaW9uc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIpCgV2YWx1ZRgCIAEoCzIaLm1lc3NhZ2UucHJvZHVjdGlvbl9j",
            "b3N0X3Q6AjgBIjgKEm5hdGlvbl91bml0X2RlZnNfdBIiCgV1bml0cxgBIAMo",
            "CzITLm1lc3NhZ2UudW5pdF9kZWZfdCKbAQoLdW5pdF9kZWZzX3QSOwoMbmF0",
            "aW9uX3VuaXRzGAEgAygLMiUubWVzc2FnZS51bml0X2RlZnNfdC5OYXRpb25V",
            "bml0c0VudHJ5Gk8KEE5hdGlvblVuaXRzRW50cnkSCwoDa2V5GAEgASgJEioK",
            "BXZhbHVlGAIgASgLMhsubWVzc2FnZS5uYXRpb25fdW5pdF9kZWZzX3Q6AjgB",
            "IicKBnRlYW1fdBIMCgRuYW1lGAEgASgJEg8KB25hdGlvbnMYAiADKAki4wIK",
            "FHNjZW5hcmlvX2NvbmRpdGlvbl90Eg4KBmFjdG9ycxgBIAMoCRI2CgZhY3Rp",
            "b24YAiABKA4yJi5tZXNzYWdlLnNjZW5hcmlvX2NvbmRpdGlvbl90LmFjdGlv",
            "bl90EjYKBm9uZV9vZhgDIAMoCzImLm1lc3NhZ2Uuc2NlbmFyaW9fY29uZGl0",
            "aW9uX3Qub2JqZWN0X3QaYwoIb2JqZWN0X3QSOQoEdHlwZRgBIAEoDjIrLm1l",
            "c3NhZ2Uuc2NlbmFyaW9fY29uZGl0aW9uX3Qub2JqZWN0X3R5cGVfdBINCgVu",
            "YW1lcxgCIAMoCRINCgVoZXhlcxgDIAMoBSImCghhY3Rpb25fdBIMCghvY2N1",
            "cGllcxAAEgwKCGRlc3Ryb3lzEAEiPgoNb2JqZWN0X3R5cGVfdBIJCgVoZXhl",
            "cxAAEgYKAnNiEAESDgoKZmxlZXRfYXJlYRACEgoKBm5hdGlvbhADIlwKGWZs",
            "ZWV0X3JlbGVhc2VfY29uZGl0aW9uX3QSDQoFZmxlZXQYASABKAkSMAoJY29u",
            "ZGl0aW9uGAIgASgLMh0ubWVzc2FnZS5zY2VuYXJpb19jb25kaXRpb25fdCJy",
            "ChV3YXJfZW50cnlfY29uZGl0aW9uX3QSJwoHZWNvbm9teRgDIAEoDjIWLm1l",
            "c3NhZ2Uud2FyX2Zvb3RpbmdfdBIwCgljb25kaXRpb24YAiABKAsyHS5tZXNz",
            "YWdlLnNjZW5hcmlvX2NvbmRpdGlvbl90IsEDCg9zY2VuYXJpb190dXJuX3QS",
            "DAoEdHVybhgBIAEoBRJHChBuYXRpb25hbF9hY3Rpb25zGAIgAygLMi0ubWVz",
            "c2FnZS5zY2VuYXJpb190dXJuX3QuTmF0aW9uYWxBY3Rpb25zRW50cnka8gEK",
            "EW5hdGlvbmFsX2FjdGlvbl90EkQKB2FjdGlvbnMYASADKAsyMy5tZXNzYWdl",
            "LnNjZW5hcmlvX3R1cm5fdC5uYXRpb25hbF9hY3Rpb25fdC5hY3Rpb25fdBph",
            "CghhY3Rpb25fdBJGCgR0eXBlGAEgASgOMjgubWVzc2FnZS5zY2VuYXJpb190",
            "dXJuX3QubmF0aW9uYWxfYWN0aW9uX3QuYWN0aW9uX3R5cGVfdBINCgVuYW1l",
            "cxgCIAMoCSI0Cg1hY3Rpb25fdHlwZV90EhIKDnJlbGVhc2VfZmxlZXRzEAAS",
            "DwoLZGVjbGFyZV93YXIQARpiChROYXRpb25hbEFjdGlvbnNFbnRyeRILCgNr",
            "ZXkYASABKAkSOQoFdmFsdWUYAiABKAsyKi5tZXNzYWdlLnNjZW5hcmlvX3R1",
            "cm5fdC5uYXRpb25hbF9hY3Rpb25fdDoCOAEimgUKCnNjZW5hcmlvX3QSDAoE",
            "bmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIjCgpzdGFydF90dXJu",
            "GAMgASgLMg8ubWVzc2FnZS50dXJuX3QSHgoFdGVhbXMYBCADKAsyDy5tZXNz",
            "YWdlLnRlYW1fdBIXCg90ZWFtX3R1cm5fb3JkZXIYBSADKAkSCwoDbWFwGAYg",
            "ASgJEhcKD29yZGVyX29mX2JhdHRsZRgHIAEoCRITCgtzZXR1cF9vcmRlchgI",
            "IAMoCRIxCgduYXRpb25zGAkgAygLMiAubWVzc2FnZS5zY2VuYXJpb190Lk5h",
            "dGlvbnNFbnRyeRInCgV0dXJucxgKIAMoCzIYLm1lc3NhZ2Uuc2NlbmFyaW9f",
            "dHVybl90GqUCCghuYXRpb25fdBITCgthdF93YXJfd2l0aBgBIAMoCRIbChNm",
            "dXR1cmVfYmVsbGlnZXJlbnRzGAIgAygJEicKB2Vjb25vbXkYAyABKA4yFi5t",
            "ZXNzYWdlLndhcl9mb290aW5nX3QSGAoQZXhoYXVzdGlvbl90dXJucxgEIAEo",
            "BRImCh5hY2N1bXVsYXRlX2V4aGF1c3Rpb25fYXRfcGVhY2UYBSABKAgSPgoS",
            "cmVsZWFzZV9jb25kaXRpb25zGAYgAygLMiIubWVzc2FnZS5mbGVldF9yZWxl",
            "YXNlX2NvbmRpdGlvbl90EjwKFHdhcl9lbnRyeV9jb25kaXRpb25zGAcgAygL",
            "Mh4ubWVzc2FnZS53YXJfZW50cnlfY29uZGl0aW9uX3QaTAoMTmF0aW9uc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1ZRgCIAEoCzIcLm1lc3NhZ2Uuc2Nl",
            "bmFyaW9fdC5uYXRpb25fdDoCOAEqTAoJZmVhdHVyZV90Eg4KCm5vX2ZlYXR1",
            "cmUQABIICgRiYXRzEAESBgoCc2IQAhIHCgNtaW4QAxIHCgNtYWoQBBILCgdj",
            "YXBpdGFsEAUqIAoIc2Vhc29uX3QSCgoGc3ByaW5nEAASCAoEZmFsbBABKooB",
            "Cg10dWdfbWlzc2lvbl90EgUKAUEQABIFCgFCEAESBQoBQxACEgUKAUQQAxIF",
            "CgFFEAQSBQoBRhAFEgUKAUcQBhIFCgFIEAcSBQoBSRAIEgYKAkoxEAkSBgoC",
            "SjIQChIGCgJLMRALEgYKAksyEAwSBQoBTBANEgUKAU0QDhIFCgFOEA8SBQoB",
            "TxAQKnYKDmNhcnJpZXJfdHlwZV90EhEKDW5vdF9hX2NhcnJpZXIQABIXChNz",
            "aW5nbGVfc2hpcF9jYXJyaWVyEAESEQoNbGlnaHRfY2FycmllchACEhIKDm1l",
            "ZGl1bV9jYXJyaWVyEAMSEQoNaGVhdnlfY2FycmllchAEKkYKDWVzY29ydF90",
            "eXBlX3QSEQoNbm90X2FuX2VzY29ydBAAEhAKDGxpZ2h0X2VzY29ydBABEhAK",
            "DGhlYXZ5X2VzY29ydBACKjQKDXdhcl9mb290aW5nX3QSBwoDd2FyEAASDwoL",
            "bGltaXRlZF93YXIQARIJCgVwZWFjZRACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::Message.feature_t), typeof(global::Message.season_t), typeof(global::Message.tug_mission_t), typeof(global::Message.carrier_type_t), typeof(global::Message.escort_type_t), typeof(global::Message.war_footing_t), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Message.turn_t), global::Message.turn_t.Parser, new[]{ "Year", "Season" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.hex_coord_t), global::Message.hex_coord_t.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_hex_zone_t), global::Message.capital_hex_zone_t.Parser, new[]{ "Name", "Features" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_hex_t), global::Message.capital_hex_t.Parser, new[]{ "Coord", "Zones" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.capital_t), global::Message.capital_t.Parser, new[]{ "Hexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.offmap_possesions_t), global::Message.offmap_possesions_t.Parser, new[]{ "Provinces", "Mins", "Majs", "SurveyShips", "CannotBuildOffmapCapital", "OldShipyard" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.nation_t), global::Message.nation_t.Parser, new[]{ "Name", "ShortName", "Capital", "FreeStrategicMoves", "CapitalStarPoints", "OffmapPossesions", "NationId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.nations_t), global::Message.nations_t.Parser, new[]{ "Nations" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.hex_t), global::Message.hex_t.Parser, new[]{ "Coord", "Owner", "Feature", "NeutralZoneBordering" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.province_hex_t), global::Message.province_hex_t.Parser, new[]{ "Hex", "Feature" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.province_t), global::Message.province_t.Parser, new[]{ "Hexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.offmap_area_t), global::Message.offmap_area_t.Parser, new[]{ "Name", "Features", "CounterHex", "AdjacentHexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.starting_national_holdings_t), global::Message.starting_national_holdings_t.Parser, new[]{ "Provinces", "OffmapArea" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.map_t), global::Message.map_t.Parser, new[]{ "Width", "Height", "NzPlanets", "NzHexes", "StartingNationalHoldings", "Hexes" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.model_t), global::Message.model_t.Parser, new[]{ "Nations", "Map" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.oob_unit_t), global::Message.oob_unit_t.Parser, new[]{ "Unit", "Times" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.production_element_t), global::Message.production_element_t.Parser, new[]{ "Year", "Season", "Units" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.starting_fleet_t), global::Message.starting_fleet_t.Parser, new[]{ "Hexes", "Units", "Reserve", "PrewarConstruction", "StrategicMoveArrivalYear", "StrategicMoveArrivalSeason", "HexPlacementLimits" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.mothball_reserve_t), global::Message.mothball_reserve_t.Parser, new[]{ "Units", "WarRelease", "LimitedWarRelease" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.order_of_battle_t), global::Message.order_of_battle_t.Parser, new[]{ "StartingFleets", "MothballReserve", "Production" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.orders_of_battle_t), global::Message.orders_of_battle_t.Parser, new[]{ "Oobs" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.unit_def_side_t), global::Message.unit_def_side_t.Parser, new[]{ "Att", "Def", "Scout", "Fighters", "HeavyFighterBonus", "Pfs", "Drones", "Mauler", "TugMissions" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.towable_t), global::Message.towable_t.Parser, new[]{ "MoveCost", "StratMoveLimit" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.production_cost_t), global::Message.production_cost_t.Parser, new[]{ "Cost", "FighterCost" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.unit_def_t), global::Message.unit_def_t.Parser, new[]{ "Name", "Cmd", "Uncrippled", "Crippled", "EscortType", "Available", "Pod", "MaxInService", "Construction", "Substitutions", "Conversions", "Move", "CarrierType", "NotSpaceworthy", "Towable", "Salvage", "Notes" }, null, null, new pbr::GeneratedCodeInfo[] { null, null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.nation_unit_defs_t), global::Message.nation_unit_defs_t.Parser, new[]{ "Units" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.unit_defs_t), global::Message.unit_defs_t.Parser, new[]{ "NationUnits" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.team_t), global::Message.team_t.Parser, new[]{ "Name", "Nations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_condition_t), global::Message.scenario_condition_t.Parser, new[]{ "Actors", "Action", "OneOf" }, null, new[]{ typeof(global::Message.scenario_condition_t.Types.action_t), typeof(global::Message.scenario_condition_t.Types.object_type_t) }, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_condition_t.Types.object_t), global::Message.scenario_condition_t.Types.object_t.Parser, new[]{ "Type", "Names", "Hexes" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Message.fleet_release_condition_t), global::Message.fleet_release_condition_t.Parser, new[]{ "Fleet", "Condition" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.war_entry_condition_t), global::Message.war_entry_condition_t.Parser, new[]{ "Economy", "Condition" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_turn_t), global::Message.scenario_turn_t.Parser, new[]{ "Turn", "NationalActions" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_turn_t.Types.national_action_t), global::Message.scenario_turn_t.Types.national_action_t.Parser, new[]{ "Actions" }, null, new[]{ typeof(global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t) }, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_turn_t.Types.national_action_t.Types.action_t), global::Message.scenario_turn_t.Types.national_action_t.Types.action_t.Parser, new[]{ "Type", "Names" }, null, null, null)}),
            null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_t), global::Message.scenario_t.Parser, new[]{ "Name", "Description", "StartTurn", "Teams", "TeamTurnOrder", "Map", "OrderOfBattle", "SetupOrder", "Nations", "Turns" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Message.scenario_t.Types.nation_t), global::Message.scenario_t.Types.nation_t.Parser, new[]{ "AtWarWith", "FutureBelligerents", "Economy", "ExhaustionTurns", "AccumulateExhaustionAtPeace", "ReleaseConditions", "WarEntryConditions" }, null, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum feature_t {
    no_feature = 0,
    bats = 1,
    sb = 2,
    min = 3,
    maj = 4,
    capital = 5,
  }

  public enum season_t {
    spring = 0,
    fall = 1,
  }

  public enum tug_mission_t {
    A = 0,
    B = 1,
    C = 2,
    D = 3,
    E = 4,
    F = 5,
    G = 6,
    H = 7,
    I = 8,
    J1 = 9,
    J2 = 10,
    K1 = 11,
    K2 = 12,
    L = 13,
    M = 14,
    N = 15,
    O = 16,
  }

  public enum carrier_type_t {
    not_a_carrier = 0,
    single_ship_carrier = 1,
    light_carrier = 2,
    medium_carrier = 3,
    heavy_carrier = 4,
  }

  public enum escort_type_t {
    not_an_escort = 0,
    light_escort = 1,
    heavy_escort = 2,
  }

  public enum war_footing_t {
    war = 0,
    limited_war = 1,
    peace = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class turn_t : pb::IMessage<turn_t> {
    private static readonly pb::MessageParser<turn_t> _parser = new pb::MessageParser<turn_t>(() => new turn_t());
    public static pb::MessageParser<turn_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public turn_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public turn_t(turn_t other) : this() {
      year_ = other.year_;
      season_ = other.season_;
    }

    public turn_t Clone() {
      return new turn_t(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 2;
    private global::Message.season_t season_ = global::Message.season_t.spring;
    public global::Message.season_t Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as turn_t);
    }

    public bool Equals(turn_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Season != other.Season) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Season != global::Message.season_t.spring) hash ^= Season.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Season != global::Message.season_t.spring) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Season);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Season != global::Message.season_t.spring) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Season);
      }
      return size;
    }

    public void MergeFrom(turn_t other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Season != global::Message.season_t.spring) {
        Season = other.Season;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            season_ = (global::Message.season_t) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class hex_coord_t : pb::IMessage<hex_coord_t> {
    private static readonly pb::MessageParser<hex_coord_t> _parser = new pb::MessageParser<hex_coord_t>(() => new hex_coord_t());
    public static pb::MessageParser<hex_coord_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public hex_coord_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public hex_coord_t(hex_coord_t other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    public hex_coord_t Clone() {
      return new hex_coord_t(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as hex_coord_t);
    }

    public bool Equals(hex_coord_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    public void MergeFrom(hex_coord_t other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  nations messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_hex_zone_t : pb::IMessage<capital_hex_zone_t> {
    private static readonly pb::MessageParser<capital_hex_zone_t> _parser = new pb::MessageParser<capital_hex_zone_t>(() => new capital_hex_zone_t());
    public static pb::MessageParser<capital_hex_zone_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_hex_zone_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_hex_zone_t(capital_hex_zone_t other) : this() {
      name_ = other.name_;
      features_ = other.features_.Clone();
    }

    public capital_hex_zone_t Clone() {
      return new capital_hex_zone_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.feature_t> _repeated_features_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Message.feature_t) x);
    private readonly pbc::RepeatedField<global::Message.feature_t> features_ = new pbc::RepeatedField<global::Message.feature_t>();
    public pbc::RepeatedField<global::Message.feature_t> Features {
      get { return features_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_hex_zone_t);
    }

    public bool Equals(capital_hex_zone_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!features_.Equals(other.features_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= features_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      features_.WriteTo(output, _repeated_features_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      return size;
    }

    public void MergeFrom(capital_hex_zone_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      features_.Add(other.features_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_hex_t : pb::IMessage<capital_hex_t> {
    private static readonly pb::MessageParser<capital_hex_t> _parser = new pb::MessageParser<capital_hex_t>(() => new capital_hex_t());
    public static pb::MessageParser<capital_hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_hex_t(capital_hex_t other) : this() {
      coord_ = other.coord_;
      zones_ = other.zones_.Clone();
    }

    public capital_hex_t Clone() {
      return new capital_hex_t(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private int coord_;
    public int Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.capital_hex_zone_t> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(18, global::Message.capital_hex_zone_t.Parser);
    private readonly pbc::RepeatedField<global::Message.capital_hex_zone_t> zones_ = new pbc::RepeatedField<global::Message.capital_hex_zone_t>();
    public pbc::RepeatedField<global::Message.capital_hex_zone_t> Zones {
      get { return zones_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_hex_t);
    }

    public bool Equals(capital_hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coord != other.Coord) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Coord != 0) hash ^= Coord.GetHashCode();
      hash ^= zones_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coord != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coord);
      }
      zones_.WriteTo(output, _repeated_zones_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Coord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coord);
      }
      size += zones_.CalculateSize(_repeated_zones_codec);
      return size;
    }

    public void MergeFrom(capital_hex_t other) {
      if (other == null) {
        return;
      }
      if (other.Coord != 0) {
        Coord = other.Coord;
      }
      zones_.Add(other.zones_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coord = input.ReadInt32();
            break;
          }
          case 18: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class capital_t : pb::IMessage<capital_t> {
    private static readonly pb::MessageParser<capital_t> _parser = new pb::MessageParser<capital_t>(() => new capital_t());
    public static pb::MessageParser<capital_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public capital_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public capital_t(capital_t other) : this() {
      hexes_ = other.hexes_.Clone();
    }

    public capital_t Clone() {
      return new capital_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.capital_hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(10, global::Message.capital_hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.capital_hex_t> hexes_ = new pbc::RepeatedField<global::Message.capital_hex_t>();
    public pbc::RepeatedField<global::Message.capital_hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as capital_t);
    }

    public bool Equals(capital_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(capital_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class offmap_possesions_t : pb::IMessage<offmap_possesions_t> {
    private static readonly pb::MessageParser<offmap_possesions_t> _parser = new pb::MessageParser<offmap_possesions_t>(() => new offmap_possesions_t());
    public static pb::MessageParser<offmap_possesions_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public offmap_possesions_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public offmap_possesions_t(offmap_possesions_t other) : this() {
      provinces_ = other.provinces_;
      mins_ = other.mins_;
      majs_ = other.majs_;
      surveyShips_ = other.surveyShips_;
      cannotBuildOffmapCapital_ = other.cannotBuildOffmapCapital_;
      oldShipyard_ = other.oldShipyard_;
    }

    public offmap_possesions_t Clone() {
      return new offmap_possesions_t(this);
    }

    /// <summary>Field number for the "provinces" field.</summary>
    public const int ProvincesFieldNumber = 1;
    private int provinces_;
    public int Provinces {
      get { return provinces_; }
      set {
        provinces_ = value;
      }
    }

    /// <summary>Field number for the "mins" field.</summary>
    public const int MinsFieldNumber = 2;
    private int mins_;
    public int Mins {
      get { return mins_; }
      set {
        mins_ = value;
      }
    }

    /// <summary>Field number for the "majs" field.</summary>
    public const int MajsFieldNumber = 3;
    private int majs_;
    public int Majs {
      get { return majs_; }
      set {
        majs_ = value;
      }
    }

    /// <summary>Field number for the "survey_ships" field.</summary>
    public const int SurveyShipsFieldNumber = 4;
    private int surveyShips_;
    public int SurveyShips {
      get { return surveyShips_; }
      set {
        surveyShips_ = value;
      }
    }

    /// <summary>Field number for the "cannot_build_offmap_capital" field.</summary>
    public const int CannotBuildOffmapCapitalFieldNumber = 5;
    private bool cannotBuildOffmapCapital_;
    public bool CannotBuildOffmapCapital {
      get { return cannotBuildOffmapCapital_; }
      set {
        cannotBuildOffmapCapital_ = value;
      }
    }

    /// <summary>Field number for the "old_shipyard" field.</summary>
    public const int OldShipyardFieldNumber = 6;
    private bool oldShipyard_;
    public bool OldShipyard {
      get { return oldShipyard_; }
      set {
        oldShipyard_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as offmap_possesions_t);
    }

    public bool Equals(offmap_possesions_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provinces != other.Provinces) return false;
      if (Mins != other.Mins) return false;
      if (Majs != other.Majs) return false;
      if (SurveyShips != other.SurveyShips) return false;
      if (CannotBuildOffmapCapital != other.CannotBuildOffmapCapital) return false;
      if (OldShipyard != other.OldShipyard) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Provinces != 0) hash ^= Provinces.GetHashCode();
      if (Mins != 0) hash ^= Mins.GetHashCode();
      if (Majs != 0) hash ^= Majs.GetHashCode();
      if (SurveyShips != 0) hash ^= SurveyShips.GetHashCode();
      if (CannotBuildOffmapCapital != false) hash ^= CannotBuildOffmapCapital.GetHashCode();
      if (OldShipyard != false) hash ^= OldShipyard.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Provinces != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Provinces);
      }
      if (Mins != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mins);
      }
      if (Majs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Majs);
      }
      if (SurveyShips != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SurveyShips);
      }
      if (CannotBuildOffmapCapital != false) {
        output.WriteRawTag(40);
        output.WriteBool(CannotBuildOffmapCapital);
      }
      if (OldShipyard != false) {
        output.WriteRawTag(48);
        output.WriteBool(OldShipyard);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Provinces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Provinces);
      }
      if (Mins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mins);
      }
      if (Majs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Majs);
      }
      if (SurveyShips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurveyShips);
      }
      if (CannotBuildOffmapCapital != false) {
        size += 1 + 1;
      }
      if (OldShipyard != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(offmap_possesions_t other) {
      if (other == null) {
        return;
      }
      if (other.Provinces != 0) {
        Provinces = other.Provinces;
      }
      if (other.Mins != 0) {
        Mins = other.Mins;
      }
      if (other.Majs != 0) {
        Majs = other.Majs;
      }
      if (other.SurveyShips != 0) {
        SurveyShips = other.SurveyShips;
      }
      if (other.CannotBuildOffmapCapital != false) {
        CannotBuildOffmapCapital = other.CannotBuildOffmapCapital;
      }
      if (other.OldShipyard != false) {
        OldShipyard = other.OldShipyard;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Provinces = input.ReadInt32();
            break;
          }
          case 16: {
            Mins = input.ReadInt32();
            break;
          }
          case 24: {
            Majs = input.ReadInt32();
            break;
          }
          case 32: {
            SurveyShips = input.ReadInt32();
            break;
          }
          case 40: {
            CannotBuildOffmapCapital = input.ReadBool();
            break;
          }
          case 48: {
            OldShipyard = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class nation_t : pb::IMessage<nation_t> {
    private static readonly pb::MessageParser<nation_t> _parser = new pb::MessageParser<nation_t>(() => new nation_t());
    public static pb::MessageParser<nation_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public nation_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public nation_t(nation_t other) : this() {
      name_ = other.name_;
      shortName_ = other.shortName_;
      Capital = other.capital_ != null ? other.Capital.Clone() : null;
      freeStrategicMoves_ = other.freeStrategicMoves_;
      capitalStarPoints_ = other.capitalStarPoints_;
      OffmapPossesions = other.offmapPossesions_ != null ? other.OffmapPossesions.Clone() : null;
      nationId_ = other.nationId_;
    }

    public nation_t Clone() {
      return new nation_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 2;
    private string shortName_ = "";
    public string ShortName {
      get { return shortName_; }
      set {
        shortName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capital" field.</summary>
    public const int CapitalFieldNumber = 3;
    private global::Message.capital_t capital_;
    public global::Message.capital_t Capital {
      get { return capital_; }
      set {
        capital_ = value;
      }
    }

    /// <summary>Field number for the "free_strategic_moves" field.</summary>
    public const int FreeStrategicMovesFieldNumber = 4;
    private int freeStrategicMoves_;
    public int FreeStrategicMoves {
      get { return freeStrategicMoves_; }
      set {
        freeStrategicMoves_ = value;
      }
    }

    /// <summary>Field number for the "capital_star_points" field.</summary>
    public const int CapitalStarPointsFieldNumber = 5;
    private int capitalStarPoints_;
    public int CapitalStarPoints {
      get { return capitalStarPoints_; }
      set {
        capitalStarPoints_ = value;
      }
    }

    /// <summary>Field number for the "offmap_possesions" field.</summary>
    public const int OffmapPossesionsFieldNumber = 6;
    private global::Message.offmap_possesions_t offmapPossesions_;
    public global::Message.offmap_possesions_t OffmapPossesions {
      get { return offmapPossesions_; }
      set {
        offmapPossesions_ = value;
      }
    }

    /// <summary>Field number for the "nation_id" field.</summary>
    public const int NationIdFieldNumber = 7;
    private int nationId_;
    public int NationId {
      get { return nationId_; }
      set {
        nationId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as nation_t);
    }

    public bool Equals(nation_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortName != other.ShortName) return false;
      if (!object.Equals(Capital, other.Capital)) return false;
      if (FreeStrategicMoves != other.FreeStrategicMoves) return false;
      if (CapitalStarPoints != other.CapitalStarPoints) return false;
      if (!object.Equals(OffmapPossesions, other.OffmapPossesions)) return false;
      if (NationId != other.NationId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortName.Length != 0) hash ^= ShortName.GetHashCode();
      if (capital_ != null) hash ^= Capital.GetHashCode();
      if (FreeStrategicMoves != 0) hash ^= FreeStrategicMoves.GetHashCode();
      if (CapitalStarPoints != 0) hash ^= CapitalStarPoints.GetHashCode();
      if (offmapPossesions_ != null) hash ^= OffmapPossesions.GetHashCode();
      if (NationId != 0) hash ^= NationId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShortName);
      }
      if (capital_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Capital);
      }
      if (FreeStrategicMoves != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeStrategicMoves);
      }
      if (CapitalStarPoints != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CapitalStarPoints);
      }
      if (offmapPossesions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OffmapPossesions);
      }
      if (NationId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NationId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (capital_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capital);
      }
      if (FreeStrategicMoves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeStrategicMoves);
      }
      if (CapitalStarPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CapitalStarPoints);
      }
      if (offmapPossesions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffmapPossesions);
      }
      if (NationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NationId);
      }
      return size;
    }

    public void MergeFrom(nation_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortName.Length != 0) {
        ShortName = other.ShortName;
      }
      if (other.capital_ != null) {
        if (capital_ == null) {
          capital_ = new global::Message.capital_t();
        }
        Capital.MergeFrom(other.Capital);
      }
      if (other.FreeStrategicMoves != 0) {
        FreeStrategicMoves = other.FreeStrategicMoves;
      }
      if (other.CapitalStarPoints != 0) {
        CapitalStarPoints = other.CapitalStarPoints;
      }
      if (other.offmapPossesions_ != null) {
        if (offmapPossesions_ == null) {
          offmapPossesions_ = new global::Message.offmap_possesions_t();
        }
        OffmapPossesions.MergeFrom(other.OffmapPossesions);
      }
      if (other.NationId != 0) {
        NationId = other.NationId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ShortName = input.ReadString();
            break;
          }
          case 26: {
            if (capital_ == null) {
              capital_ = new global::Message.capital_t();
            }
            input.ReadMessage(capital_);
            break;
          }
          case 32: {
            FreeStrategicMoves = input.ReadInt32();
            break;
          }
          case 40: {
            CapitalStarPoints = input.ReadInt32();
            break;
          }
          case 50: {
            if (offmapPossesions_ == null) {
              offmapPossesions_ = new global::Message.offmap_possesions_t();
            }
            input.ReadMessage(offmapPossesions_);
            break;
          }
          case 56: {
            NationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class nations_t : pb::IMessage<nations_t> {
    private static readonly pb::MessageParser<nations_t> _parser = new pb::MessageParser<nations_t>(() => new nations_t());
    public static pb::MessageParser<nations_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public nations_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public nations_t(nations_t other) : this() {
      nations_ = other.nations_.Clone();
    }

    public nations_t Clone() {
      return new nations_t(this);
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.nation_t>.Codec _map_nations_codec
        = new pbc::MapField<string, global::Message.nation_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.nation_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.nation_t> nations_ = new pbc::MapField<string, global::Message.nation_t>();
    public pbc::MapField<string, global::Message.nation_t> Nations {
      get { return nations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as nations_t);
    }

    public bool Equals(nations_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Nations.Equals(other.Nations)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Nations.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      nations_.WriteTo(output, _map_nations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += nations_.CalculateSize(_map_nations_codec);
      return size;
    }

    public void MergeFrom(nations_t other) {
      if (other == null) {
        return;
      }
      nations_.Add(other.nations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nations_.AddEntriesFrom(input, _map_nations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Map messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class hex_t : pb::IMessage<hex_t> {
    private static readonly pb::MessageParser<hex_t> _parser = new pb::MessageParser<hex_t>(() => new hex_t());
    public static pb::MessageParser<hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public hex_t(hex_t other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      owner_ = other.owner_;
      feature_ = other.feature_;
      neutralZoneBordering_ = other.neutralZoneBordering_.Clone();
    }

    public hex_t Clone() {
      return new hex_t(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::Message.hex_coord_t coord_;
    public global::Message.hex_coord_t Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private int owner_;
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 3;
    private global::Message.feature_t feature_ = global::Message.feature_t.no_feature;
    public global::Message.feature_t Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    /// <summary>Field number for the "neutral_zone_bordering" field.</summary>
    public const int NeutralZoneBorderingFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_neutralZoneBordering_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> neutralZoneBordering_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> NeutralZoneBordering {
      get { return neutralZoneBordering_; }
    }

    public override bool Equals(object other) {
      return Equals(other as hex_t);
    }

    public bool Equals(hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (Owner != other.Owner) return false;
      if (Feature != other.Feature) return false;
      if(!neutralZoneBordering_.Equals(other.neutralZoneBordering_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Feature != global::Message.feature_t.no_feature) hash ^= Feature.GetHashCode();
      hash ^= neutralZoneBordering_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Owner);
      }
      if (Feature != global::Message.feature_t.no_feature) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Feature);
      }
      neutralZoneBordering_.WriteTo(output, _repeated_neutralZoneBordering_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (Feature != global::Message.feature_t.no_feature) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Feature);
      }
      size += neutralZoneBordering_.CalculateSize(_repeated_neutralZoneBordering_codec);
      return size;
    }

    public void MergeFrom(hex_t other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::Message.hex_coord_t();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Feature != global::Message.feature_t.no_feature) {
        Feature = other.Feature;
      }
      neutralZoneBordering_.Add(other.neutralZoneBordering_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::Message.hex_coord_t();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 16: {
            Owner = input.ReadInt32();
            break;
          }
          case 24: {
            feature_ = (global::Message.feature_t) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            neutralZoneBordering_.AddEntriesFrom(input, _repeated_neutralZoneBordering_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class province_hex_t : pb::IMessage<province_hex_t> {
    private static readonly pb::MessageParser<province_hex_t> _parser = new pb::MessageParser<province_hex_t>(() => new province_hex_t());
    public static pb::MessageParser<province_hex_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public province_hex_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public province_hex_t(province_hex_t other) : this() {
      hex_ = other.hex_;
      feature_ = other.feature_;
    }

    public province_hex_t Clone() {
      return new province_hex_t(this);
    }

    /// <summary>Field number for the "hex" field.</summary>
    public const int HexFieldNumber = 1;
    private int hex_;
    public int Hex {
      get { return hex_; }
      set {
        hex_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 2;
    private global::Message.feature_t feature_ = global::Message.feature_t.no_feature;
    public global::Message.feature_t Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as province_hex_t);
    }

    public bool Equals(province_hex_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hex != other.Hex) return false;
      if (Feature != other.Feature) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Hex != 0) hash ^= Hex.GetHashCode();
      if (Feature != global::Message.feature_t.no_feature) hash ^= Feature.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Hex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Hex);
      }
      if (Feature != global::Message.feature_t.no_feature) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Feature);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Hex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hex);
      }
      if (Feature != global::Message.feature_t.no_feature) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Feature);
      }
      return size;
    }

    public void MergeFrom(province_hex_t other) {
      if (other == null) {
        return;
      }
      if (other.Hex != 0) {
        Hex = other.Hex;
      }
      if (other.Feature != global::Message.feature_t.no_feature) {
        Feature = other.Feature;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hex = input.ReadInt32();
            break;
          }
          case 16: {
            feature_ = (global::Message.feature_t) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class province_t : pb::IMessage<province_t> {
    private static readonly pb::MessageParser<province_t> _parser = new pb::MessageParser<province_t>(() => new province_t());
    public static pb::MessageParser<province_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public province_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public province_t(province_t other) : this() {
      hexes_ = other.hexes_.Clone();
    }

    public province_t Clone() {
      return new province_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.province_hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(10, global::Message.province_hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.province_hex_t> hexes_ = new pbc::RepeatedField<global::Message.province_hex_t>();
    public pbc::RepeatedField<global::Message.province_hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as province_t);
    }

    public bool Equals(province_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(province_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  How the offmap region (if any) is connected to the map.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class offmap_area_t : pb::IMessage<offmap_area_t> {
    private static readonly pb::MessageParser<offmap_area_t> _parser = new pb::MessageParser<offmap_area_t>(() => new offmap_area_t());
    public static pb::MessageParser<offmap_area_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public offmap_area_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public offmap_area_t(offmap_area_t other) : this() {
      name_ = other.name_;
      features_ = other.features_.Clone();
      counterHex_ = other.counterHex_;
      adjacentHexes_ = other.adjacentHexes_.Clone();
    }

    public offmap_area_t Clone() {
      return new offmap_area_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.feature_t> _repeated_features_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Message.feature_t) x);
    private readonly pbc::RepeatedField<global::Message.feature_t> features_ = new pbc::RepeatedField<global::Message.feature_t>();
    public pbc::RepeatedField<global::Message.feature_t> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "counter_hex" field.</summary>
    public const int CounterHexFieldNumber = 3;
    private int counterHex_;
    /// <summary>
    ///  Where the SB counter is chown, if any.
    /// </summary>
    public int CounterHex {
      get { return counterHex_; }
      set {
        counterHex_ = value;
      }
    }

    /// <summary>Field number for the "adjacent_hexes" field.</summary>
    public const int AdjacentHexesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_adjacentHexes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> adjacentHexes_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> AdjacentHexes {
      get { return adjacentHexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as offmap_area_t);
    }

    public bool Equals(offmap_area_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!features_.Equals(other.features_)) return false;
      if (CounterHex != other.CounterHex) return false;
      if(!adjacentHexes_.Equals(other.adjacentHexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= features_.GetHashCode();
      if (CounterHex != 0) hash ^= CounterHex.GetHashCode();
      hash ^= adjacentHexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      features_.WriteTo(output, _repeated_features_codec);
      if (CounterHex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CounterHex);
      }
      adjacentHexes_.WriteTo(output, _repeated_adjacentHexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      if (CounterHex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CounterHex);
      }
      size += adjacentHexes_.CalculateSize(_repeated_adjacentHexes_codec);
      return size;
    }

    public void MergeFrom(offmap_area_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      features_.Add(other.features_);
      if (other.CounterHex != 0) {
        CounterHex = other.CounterHex;
      }
      adjacentHexes_.Add(other.adjacentHexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 24: {
            CounterHex = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            adjacentHexes_.AddEntriesFrom(input, _repeated_adjacentHexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class starting_national_holdings_t : pb::IMessage<starting_national_holdings_t> {
    private static readonly pb::MessageParser<starting_national_holdings_t> _parser = new pb::MessageParser<starting_national_holdings_t>(() => new starting_national_holdings_t());
    public static pb::MessageParser<starting_national_holdings_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public starting_national_holdings_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public starting_national_holdings_t(starting_national_holdings_t other) : this() {
      provinces_ = other.provinces_.Clone();
      OffmapArea = other.offmapArea_ != null ? other.OffmapArea.Clone() : null;
    }

    public starting_national_holdings_t Clone() {
      return new starting_national_holdings_t(this);
    }

    /// <summary>Field number for the "provinces" field.</summary>
    public const int ProvincesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.province_t> _repeated_provinces_codec
        = pb::FieldCodec.ForMessage(10, global::Message.province_t.Parser);
    private readonly pbc::RepeatedField<global::Message.province_t> provinces_ = new pbc::RepeatedField<global::Message.province_t>();
    public pbc::RepeatedField<global::Message.province_t> Provinces {
      get { return provinces_; }
    }

    /// <summary>Field number for the "offmap_area" field.</summary>
    public const int OffmapAreaFieldNumber = 2;
    private global::Message.offmap_area_t offmapArea_;
    public global::Message.offmap_area_t OffmapArea {
      get { return offmapArea_; }
      set {
        offmapArea_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as starting_national_holdings_t);
    }

    public bool Equals(starting_national_holdings_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!provinces_.Equals(other.provinces_)) return false;
      if (!object.Equals(OffmapArea, other.OffmapArea)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= provinces_.GetHashCode();
      if (offmapArea_ != null) hash ^= OffmapArea.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      provinces_.WriteTo(output, _repeated_provinces_codec);
      if (offmapArea_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffmapArea);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += provinces_.CalculateSize(_repeated_provinces_codec);
      if (offmapArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffmapArea);
      }
      return size;
    }

    public void MergeFrom(starting_national_holdings_t other) {
      if (other == null) {
        return;
      }
      provinces_.Add(other.provinces_);
      if (other.offmapArea_ != null) {
        if (offmapArea_ == null) {
          offmapArea_ = new global::Message.offmap_area_t();
        }
        OffmapArea.MergeFrom(other.OffmapArea);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            provinces_.AddEntriesFrom(input, _repeated_provinces_codec);
            break;
          }
          case 18: {
            if (offmapArea_ == null) {
              offmapArea_ = new global::Message.offmap_area_t();
            }
            input.ReadMessage(offmapArea_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class map_t : pb::IMessage<map_t> {
    private static readonly pb::MessageParser<map_t> _parser = new pb::MessageParser<map_t>(() => new map_t());
    public static pb::MessageParser<map_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public map_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public map_t(map_t other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      nzPlanets_ = other.nzPlanets_.Clone();
      nzHexes_ = other.nzHexes_.Clone();
      startingNationalHoldings_ = other.startingNationalHoldings_.Clone();
      hexes_ = other.hexes_.Clone();
    }

    public map_t Clone() {
      return new map_t(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "nz_planets" field.</summary>
    public const int NzPlanetsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_nzPlanets_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> nzPlanets_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  only in starting data (all planets are MIN)
    /// </summary>
    public pbc::RepeatedField<int> NzPlanets {
      get { return nzPlanets_; }
    }

    /// <summary>Field number for the "nz_hexes" field.</summary>
    public const int NzHexesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_nzHexes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> nzHexes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  only in starting data
    /// </summary>
    public pbc::RepeatedField<int> NzHexes {
      get { return nzHexes_; }
    }

    /// <summary>Field number for the "starting_national_holdings" field.</summary>
    public const int StartingNationalHoldingsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Message.starting_national_holdings_t>.Codec _map_startingNationalHoldings_codec
        = new pbc::MapField<string, global::Message.starting_national_holdings_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.starting_national_holdings_t.Parser), 42);
    private readonly pbc::MapField<string, global::Message.starting_national_holdings_t> startingNationalHoldings_ = new pbc::MapField<string, global::Message.starting_national_holdings_t>();
    public pbc::MapField<string, global::Message.starting_national_holdings_t> StartingNationalHoldings {
      get { return startingNationalHoldings_; }
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Message.hex_t> _repeated_hexes_codec
        = pb::FieldCodec.ForMessage(50, global::Message.hex_t.Parser);
    private readonly pbc::RepeatedField<global::Message.hex_t> hexes_ = new pbc::RepeatedField<global::Message.hex_t>();
    /// <summary>
    ///  only in saved data
    /// </summary>
    public pbc::RepeatedField<global::Message.hex_t> Hexes {
      get { return hexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as map_t);
    }

    public bool Equals(map_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!nzPlanets_.Equals(other.nzPlanets_)) return false;
      if(!nzHexes_.Equals(other.nzHexes_)) return false;
      if (!StartingNationalHoldings.Equals(other.StartingNationalHoldings)) return false;
      if(!hexes_.Equals(other.hexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= nzPlanets_.GetHashCode();
      hash ^= nzHexes_.GetHashCode();
      hash ^= StartingNationalHoldings.GetHashCode();
      hash ^= hexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      nzPlanets_.WriteTo(output, _repeated_nzPlanets_codec);
      nzHexes_.WriteTo(output, _repeated_nzHexes_codec);
      startingNationalHoldings_.WriteTo(output, _map_startingNationalHoldings_codec);
      hexes_.WriteTo(output, _repeated_hexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += nzPlanets_.CalculateSize(_repeated_nzPlanets_codec);
      size += nzHexes_.CalculateSize(_repeated_nzHexes_codec);
      size += startingNationalHoldings_.CalculateSize(_map_startingNationalHoldings_codec);
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      return size;
    }

    public void MergeFrom(map_t other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      nzPlanets_.Add(other.nzPlanets_);
      nzHexes_.Add(other.nzHexes_);
      startingNationalHoldings_.Add(other.startingNationalHoldings_);
      hexes_.Add(other.hexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            nzPlanets_.AddEntriesFrom(input, _repeated_nzPlanets_codec);
            break;
          }
          case 34:
          case 32: {
            nzHexes_.AddEntriesFrom(input, _repeated_nzHexes_codec);
            break;
          }
          case 42: {
            startingNationalHoldings_.AddEntriesFrom(input, _map_startingNationalHoldings_codec);
            break;
          }
          case 50: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Game model (as in Model-View-Controller)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class model_t : pb::IMessage<model_t> {
    private static readonly pb::MessageParser<model_t> _parser = new pb::MessageParser<model_t>(() => new model_t());
    public static pb::MessageParser<model_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public model_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public model_t(model_t other) : this() {
      Nations = other.nations_ != null ? other.Nations.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
    }

    public model_t Clone() {
      return new model_t(this);
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 1;
    private global::Message.nations_t nations_;
    public global::Message.nations_t Nations {
      get { return nations_; }
      set {
        nations_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 2;
    private global::Message.map_t map_;
    public global::Message.map_t Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as model_t);
    }

    public bool Equals(model_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nations, other.Nations)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (nations_ != null) hash ^= Nations.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (nations_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nations);
      }
      if (map_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Map);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (nations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nations);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      return size;
    }

    public void MergeFrom(model_t other) {
      if (other == null) {
        return;
      }
      if (other.nations_ != null) {
        if (nations_ == null) {
          nations_ = new global::Message.nations_t();
        }
        Nations.MergeFrom(other.Nations);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::Message.map_t();
        }
        Map.MergeFrom(other.Map);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nations_ == null) {
              nations_ = new global::Message.nations_t();
            }
            input.ReadMessage(nations_);
            break;
          }
          case 18: {
            if (map_ == null) {
              map_ = new global::Message.map_t();
            }
            input.ReadMessage(map_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Order of Battle messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class oob_unit_t : pb::IMessage<oob_unit_t> {
    private static readonly pb::MessageParser<oob_unit_t> _parser = new pb::MessageParser<oob_unit_t>(() => new oob_unit_t());
    public static pb::MessageParser<oob_unit_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public oob_unit_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public oob_unit_t(oob_unit_t other) : this() {
      unit_ = other.unit_;
      times_ = other.times_;
    }

    public oob_unit_t Clone() {
      return new oob_unit_t(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private string unit_ = "";
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///  "times: 2", "times: 3", etc. -- omission implies x1
    /// </summary>
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as oob_unit_t);
    }

    public bool Equals(oob_unit_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (Times != other.Times) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Unit.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Unit);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    public void MergeFrom(oob_unit_t other) {
      if (other == null) {
        return;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Unit = input.ReadString();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  TODO: year,season -> turn_t
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class production_element_t : pb::IMessage<production_element_t> {
    private static readonly pb::MessageParser<production_element_t> _parser = new pb::MessageParser<production_element_t>(() => new production_element_t());
    public static pb::MessageParser<production_element_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public production_element_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public production_element_t(production_element_t other) : this() {
      year_ = other.year_;
      season_ = other.season_;
      units_ = other.units_.Clone();
    }

    public production_element_t Clone() {
      return new production_element_t(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 2;
    private global::Message.season_t season_ = global::Message.season_t.spring;
    public global::Message.season_t Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(26, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    public override bool Equals(object other) {
      return Equals(other as production_element_t);
    }

    public bool Equals(production_element_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Season != other.Season) return false;
      if(!units_.Equals(other.units_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Season != global::Message.season_t.spring) hash ^= Season.GetHashCode();
      hash ^= units_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Season != global::Message.season_t.spring) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Season);
      }
      units_.WriteTo(output, _repeated_units_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Season != global::Message.season_t.spring) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Season);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(production_element_t other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Season != global::Message.season_t.spring) {
        Season = other.Season;
      }
      units_.Add(other.units_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            season_ = (global::Message.season_t) input.ReadEnum();
            break;
          }
          case 26: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  TODO: year,season -> turn_t
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class starting_fleet_t : pb::IMessage<starting_fleet_t> {
    private static readonly pb::MessageParser<starting_fleet_t> _parser = new pb::MessageParser<starting_fleet_t>(() => new starting_fleet_t());
    public static pb::MessageParser<starting_fleet_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public starting_fleet_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public starting_fleet_t(starting_fleet_t other) : this() {
      hexes_ = other.hexes_.Clone();
      units_ = other.units_.Clone();
      reserve_ = other.reserve_;
      prewarConstruction_ = other.prewarConstruction_.Clone();
      strategicMoveArrivalYear_ = other.strategicMoveArrivalYear_;
      strategicMoveArrivalSeason_ = other.strategicMoveArrivalSeason_;
      hexPlacementLimits_ = other.hexPlacementLimits_.Clone();
    }

    public starting_fleet_t Clone() {
      return new starting_fleet_t(this);
    }

    /// <summary>Field number for the "hexes" field.</summary>
    public const int HexesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hexes_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hexes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  empty indicates offmap
    /// </summary>
    public pbc::RepeatedField<int> Hexes {
      get { return hexes_; }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "reserve" field.</summary>
    public const int ReserveFieldNumber = 3;
    private bool reserve_;
    public bool Reserve {
      get { return reserve_; }
      set {
        reserve_ = value;
      }
    }

    /// <summary>Field number for the "prewar_construction" field.</summary>
    public const int PrewarConstructionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Message.production_element_t> _repeated_prewarConstruction_codec
        = pb::FieldCodec.ForMessage(34, global::Message.production_element_t.Parser);
    private readonly pbc::RepeatedField<global::Message.production_element_t> prewarConstruction_ = new pbc::RepeatedField<global::Message.production_element_t>();
    public pbc::RepeatedField<global::Message.production_element_t> PrewarConstruction {
      get { return prewarConstruction_; }
    }

    /// <summary>Field number for the "strategic_move_arrival_year" field.</summary>
    public const int StrategicMoveArrivalYearFieldNumber = 5;
    private int strategicMoveArrivalYear_;
    public int StrategicMoveArrivalYear {
      get { return strategicMoveArrivalYear_; }
      set {
        strategicMoveArrivalYear_ = value;
      }
    }

    /// <summary>Field number for the "strategic_move_arrival_season" field.</summary>
    public const int StrategicMoveArrivalSeasonFieldNumber = 6;
    private global::Message.season_t strategicMoveArrivalSeason_ = global::Message.season_t.spring;
    public global::Message.season_t StrategicMoveArrivalSeason {
      get { return strategicMoveArrivalSeason_; }
      set {
        strategicMoveArrivalSeason_ = value;
      }
    }

    /// <summary>Field number for the "hex_placement_limits" field.</summary>
    public const int HexPlacementLimitsFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_hexPlacementLimits_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
    private readonly pbc::MapField<int, int> hexPlacementLimits_ = new pbc::MapField<int, int>();
    /// <summary>
    ///  hex coord to unit limit
    /// </summary>
    public pbc::MapField<int, int> HexPlacementLimits {
      get { return hexPlacementLimits_; }
    }

    public override bool Equals(object other) {
      return Equals(other as starting_fleet_t);
    }

    public bool Equals(starting_fleet_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hexes_.Equals(other.hexes_)) return false;
      if(!units_.Equals(other.units_)) return false;
      if (Reserve != other.Reserve) return false;
      if(!prewarConstruction_.Equals(other.prewarConstruction_)) return false;
      if (StrategicMoveArrivalYear != other.StrategicMoveArrivalYear) return false;
      if (StrategicMoveArrivalSeason != other.StrategicMoveArrivalSeason) return false;
      if (!HexPlacementLimits.Equals(other.HexPlacementLimits)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hexes_.GetHashCode();
      hash ^= units_.GetHashCode();
      if (Reserve != false) hash ^= Reserve.GetHashCode();
      hash ^= prewarConstruction_.GetHashCode();
      if (StrategicMoveArrivalYear != 0) hash ^= StrategicMoveArrivalYear.GetHashCode();
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) hash ^= StrategicMoveArrivalSeason.GetHashCode();
      hash ^= HexPlacementLimits.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hexes_.WriteTo(output, _repeated_hexes_codec);
      units_.WriteTo(output, _repeated_units_codec);
      if (Reserve != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reserve);
      }
      prewarConstruction_.WriteTo(output, _repeated_prewarConstruction_codec);
      if (StrategicMoveArrivalYear != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StrategicMoveArrivalYear);
      }
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        output.WriteRawTag(48);
        output.WriteEnum((int) StrategicMoveArrivalSeason);
      }
      hexPlacementLimits_.WriteTo(output, _map_hexPlacementLimits_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hexes_.CalculateSize(_repeated_hexes_codec);
      size += units_.CalculateSize(_repeated_units_codec);
      if (Reserve != false) {
        size += 1 + 1;
      }
      size += prewarConstruction_.CalculateSize(_repeated_prewarConstruction_codec);
      if (StrategicMoveArrivalYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrategicMoveArrivalYear);
      }
      if (StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StrategicMoveArrivalSeason);
      }
      size += hexPlacementLimits_.CalculateSize(_map_hexPlacementLimits_codec);
      return size;
    }

    public void MergeFrom(starting_fleet_t other) {
      if (other == null) {
        return;
      }
      hexes_.Add(other.hexes_);
      units_.Add(other.units_);
      if (other.Reserve != false) {
        Reserve = other.Reserve;
      }
      prewarConstruction_.Add(other.prewarConstruction_);
      if (other.StrategicMoveArrivalYear != 0) {
        StrategicMoveArrivalYear = other.StrategicMoveArrivalYear;
      }
      if (other.StrategicMoveArrivalSeason != global::Message.season_t.spring) {
        StrategicMoveArrivalSeason = other.StrategicMoveArrivalSeason;
      }
      hexPlacementLimits_.Add(other.hexPlacementLimits_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 24: {
            Reserve = input.ReadBool();
            break;
          }
          case 34: {
            prewarConstruction_.AddEntriesFrom(input, _repeated_prewarConstruction_codec);
            break;
          }
          case 40: {
            StrategicMoveArrivalYear = input.ReadInt32();
            break;
          }
          case 48: {
            strategicMoveArrivalSeason_ = (global::Message.season_t) input.ReadEnum();
            break;
          }
          case 58: {
            hexPlacementLimits_.AddEntriesFrom(input, _map_hexPlacementLimits_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mothball_reserve_t : pb::IMessage<mothball_reserve_t> {
    private static readonly pb::MessageParser<mothball_reserve_t> _parser = new pb::MessageParser<mothball_reserve_t>(() => new mothball_reserve_t());
    public static pb::MessageParser<mothball_reserve_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public mothball_reserve_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public mothball_reserve_t(mothball_reserve_t other) : this() {
      units_ = other.units_.Clone();
      warRelease_ = other.warRelease_.Clone();
      limitedWarRelease_ = other.limitedWarRelease_.Clone();
    }

    public mothball_reserve_t Clone() {
      return new mothball_reserve_t(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> units_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "war_release" field.</summary>
    public const int WarReleaseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_warRelease_codec
        = pb::FieldCodec.ForMessage(18, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> warRelease_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> WarRelease {
      get { return warRelease_; }
    }

    /// <summary>Field number for the "limited_war_release" field.</summary>
    public const int LimitedWarReleaseFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.oob_unit_t> _repeated_limitedWarRelease_codec
        = pb::FieldCodec.ForMessage(26, global::Message.oob_unit_t.Parser);
    private readonly pbc::RepeatedField<global::Message.oob_unit_t> limitedWarRelease_ = new pbc::RepeatedField<global::Message.oob_unit_t>();
    public pbc::RepeatedField<global::Message.oob_unit_t> LimitedWarRelease {
      get { return limitedWarRelease_; }
    }

    public override bool Equals(object other) {
      return Equals(other as mothball_reserve_t);
    }

    public bool Equals(mothball_reserve_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!units_.Equals(other.units_)) return false;
      if(!warRelease_.Equals(other.warRelease_)) return false;
      if(!limitedWarRelease_.Equals(other.limitedWarRelease_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= units_.GetHashCode();
      hash ^= warRelease_.GetHashCode();
      hash ^= limitedWarRelease_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      warRelease_.WriteTo(output, _repeated_warRelease_codec);
      limitedWarRelease_.WriteTo(output, _repeated_limitedWarRelease_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      size += warRelease_.CalculateSize(_repeated_warRelease_codec);
      size += limitedWarRelease_.CalculateSize(_repeated_limitedWarRelease_codec);
      return size;
    }

    public void MergeFrom(mothball_reserve_t other) {
      if (other == null) {
        return;
      }
      units_.Add(other.units_);
      warRelease_.Add(other.warRelease_);
      limitedWarRelease_.Add(other.limitedWarRelease_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 18: {
            warRelease_.AddEntriesFrom(input, _repeated_warRelease_codec);
            break;
          }
          case 26: {
            limitedWarRelease_.AddEntriesFrom(input, _repeated_limitedWarRelease_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  TODO Special production rules
  ///  TODO Production notes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class order_of_battle_t : pb::IMessage<order_of_battle_t> {
    private static readonly pb::MessageParser<order_of_battle_t> _parser = new pb::MessageParser<order_of_battle_t>(() => new order_of_battle_t());
    public static pb::MessageParser<order_of_battle_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public order_of_battle_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public order_of_battle_t(order_of_battle_t other) : this() {
      startingFleets_ = other.startingFleets_.Clone();
      MothballReserve = other.mothballReserve_ != null ? other.MothballReserve.Clone() : null;
      production_ = other.production_.Clone();
    }

    public order_of_battle_t Clone() {
      return new order_of_battle_t(this);
    }

    /// <summary>Field number for the "starting_fleets" field.</summary>
    public const int StartingFleetsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.starting_fleet_t>.Codec _map_startingFleets_codec
        = new pbc::MapField<string, global::Message.starting_fleet_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.starting_fleet_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.starting_fleet_t> startingFleets_ = new pbc::MapField<string, global::Message.starting_fleet_t>();
    public pbc::MapField<string, global::Message.starting_fleet_t> StartingFleets {
      get { return startingFleets_; }
    }

    /// <summary>Field number for the "mothball_reserve" field.</summary>
    public const int MothballReserveFieldNumber = 2;
    private global::Message.mothball_reserve_t mothballReserve_;
    public global::Message.mothball_reserve_t MothballReserve {
      get { return mothballReserve_; }
      set {
        mothballReserve_ = value;
      }
    }

    /// <summary>Field number for the "production" field.</summary>
    public const int ProductionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.production_element_t> _repeated_production_codec
        = pb::FieldCodec.ForMessage(26, global::Message.production_element_t.Parser);
    private readonly pbc::RepeatedField<global::Message.production_element_t> production_ = new pbc::RepeatedField<global::Message.production_element_t>();
    public pbc::RepeatedField<global::Message.production_element_t> Production {
      get { return production_; }
    }

    public override bool Equals(object other) {
      return Equals(other as order_of_battle_t);
    }

    public bool Equals(order_of_battle_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!StartingFleets.Equals(other.StartingFleets)) return false;
      if (!object.Equals(MothballReserve, other.MothballReserve)) return false;
      if(!production_.Equals(other.production_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= StartingFleets.GetHashCode();
      if (mothballReserve_ != null) hash ^= MothballReserve.GetHashCode();
      hash ^= production_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      startingFleets_.WriteTo(output, _map_startingFleets_codec);
      if (mothballReserve_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MothballReserve);
      }
      production_.WriteTo(output, _repeated_production_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += startingFleets_.CalculateSize(_map_startingFleets_codec);
      if (mothballReserve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MothballReserve);
      }
      size += production_.CalculateSize(_repeated_production_codec);
      return size;
    }

    public void MergeFrom(order_of_battle_t other) {
      if (other == null) {
        return;
      }
      startingFleets_.Add(other.startingFleets_);
      if (other.mothballReserve_ != null) {
        if (mothballReserve_ == null) {
          mothballReserve_ = new global::Message.mothball_reserve_t();
        }
        MothballReserve.MergeFrom(other.MothballReserve);
      }
      production_.Add(other.production_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            startingFleets_.AddEntriesFrom(input, _map_startingFleets_codec);
            break;
          }
          case 18: {
            if (mothballReserve_ == null) {
              mothballReserve_ = new global::Message.mothball_reserve_t();
            }
            input.ReadMessage(mothballReserve_);
            break;
          }
          case 26: {
            production_.AddEntriesFrom(input, _repeated_production_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class orders_of_battle_t : pb::IMessage<orders_of_battle_t> {
    private static readonly pb::MessageParser<orders_of_battle_t> _parser = new pb::MessageParser<orders_of_battle_t>(() => new orders_of_battle_t());
    public static pb::MessageParser<orders_of_battle_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public orders_of_battle_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public orders_of_battle_t(orders_of_battle_t other) : this() {
      oobs_ = other.oobs_.Clone();
    }

    public orders_of_battle_t Clone() {
      return new orders_of_battle_t(this);
    }

    /// <summary>Field number for the "oobs" field.</summary>
    public const int OobsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.order_of_battle_t>.Codec _map_oobs_codec
        = new pbc::MapField<string, global::Message.order_of_battle_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.order_of_battle_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.order_of_battle_t> oobs_ = new pbc::MapField<string, global::Message.order_of_battle_t>();
    public pbc::MapField<string, global::Message.order_of_battle_t> Oobs {
      get { return oobs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as orders_of_battle_t);
    }

    public bool Equals(orders_of_battle_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Oobs.Equals(other.Oobs)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Oobs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      oobs_.WriteTo(output, _map_oobs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += oobs_.CalculateSize(_map_oobs_codec);
      return size;
    }

    public void MergeFrom(orders_of_battle_t other) {
      if (other == null) {
        return;
      }
      oobs_.Add(other.oobs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            oobs_.AddEntriesFrom(input, _map_oobs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  units
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class unit_def_side_t : pb::IMessage<unit_def_side_t> {
    private static readonly pb::MessageParser<unit_def_side_t> _parser = new pb::MessageParser<unit_def_side_t>(() => new unit_def_side_t());
    public static pb::MessageParser<unit_def_side_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public unit_def_side_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public unit_def_side_t(unit_def_side_t other) : this() {
      att_ = other.att_;
      def_ = other.def_;
      scout_ = other.scout_;
      fighters_ = other.fighters_;
      heavyFighterBonus_ = other.heavyFighterBonus_;
      pfs_ = other.pfs_;
      drones_ = other.drones_;
      mauler_ = other.mauler_;
      tugMissions_ = other.tugMissions_.Clone();
    }

    public unit_def_side_t Clone() {
      return new unit_def_side_t(this);
    }

    /// <summary>Field number for the "att" field.</summary>
    public const int AttFieldNumber = 1;
    private float att_;
    public float Att {
      get { return att_; }
      set {
        att_ = value;
      }
    }

    /// <summary>Field number for the "def" field.</summary>
    public const int DefFieldNumber = 2;
    private float def_;
    public float Def {
      get { return def_; }
      set {
        def_ = value;
      }
    }

    /// <summary>Field number for the "scout" field.</summary>
    public const int ScoutFieldNumber = 3;
    private bool scout_;
    public bool Scout {
      get { return scout_; }
      set {
        scout_ = value;
      }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 4;
    private float fighters_;
    public float Fighters {
      get { return fighters_; }
      set {
        fighters_ = value;
      }
    }

    /// <summary>Field number for the "heavy_fighter_bonus" field.</summary>
    public const int HeavyFighterBonusFieldNumber = 5;
    private float heavyFighterBonus_;
    public float HeavyFighterBonus {
      get { return heavyFighterBonus_; }
      set {
        heavyFighterBonus_ = value;
      }
    }

    /// <summary>Field number for the "pfs" field.</summary>
    public const int PfsFieldNumber = 6;
    private int pfs_;
    public int Pfs {
      get { return pfs_; }
      set {
        pfs_ = value;
      }
    }

    /// <summary>Field number for the "drones" field.</summary>
    public const int DronesFieldNumber = 7;
    private int drones_;
    public int Drones {
      get { return drones_; }
      set {
        drones_ = value;
      }
    }

    /// <summary>Field number for the "mauler" field.</summary>
    public const int MaulerFieldNumber = 8;
    private bool mauler_;
    public bool Mauler {
      get { return mauler_; }
      set {
        mauler_ = value;
      }
    }

    /// <summary>Field number for the "tug_missions" field.</summary>
    public const int TugMissionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Message.tug_mission_t> _repeated_tugMissions_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Message.tug_mission_t) x);
    private readonly pbc::RepeatedField<global::Message.tug_mission_t> tugMissions_ = new pbc::RepeatedField<global::Message.tug_mission_t>();
    public pbc::RepeatedField<global::Message.tug_mission_t> TugMissions {
      get { return tugMissions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as unit_def_side_t);
    }

    public bool Equals(unit_def_side_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Att != other.Att) return false;
      if (Def != other.Def) return false;
      if (Scout != other.Scout) return false;
      if (Fighters != other.Fighters) return false;
      if (HeavyFighterBonus != other.HeavyFighterBonus) return false;
      if (Pfs != other.Pfs) return false;
      if (Drones != other.Drones) return false;
      if (Mauler != other.Mauler) return false;
      if(!tugMissions_.Equals(other.tugMissions_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Att != 0F) hash ^= Att.GetHashCode();
      if (Def != 0F) hash ^= Def.GetHashCode();
      if (Scout != false) hash ^= Scout.GetHashCode();
      if (Fighters != 0F) hash ^= Fighters.GetHashCode();
      if (HeavyFighterBonus != 0F) hash ^= HeavyFighterBonus.GetHashCode();
      if (Pfs != 0) hash ^= Pfs.GetHashCode();
      if (Drones != 0) hash ^= Drones.GetHashCode();
      if (Mauler != false) hash ^= Mauler.GetHashCode();
      hash ^= tugMissions_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Att != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Att);
      }
      if (Def != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Def);
      }
      if (Scout != false) {
        output.WriteRawTag(24);
        output.WriteBool(Scout);
      }
      if (Fighters != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Fighters);
      }
      if (HeavyFighterBonus != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HeavyFighterBonus);
      }
      if (Pfs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Pfs);
      }
      if (Drones != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Drones);
      }
      if (Mauler != false) {
        output.WriteRawTag(64);
        output.WriteBool(Mauler);
      }
      tugMissions_.WriteTo(output, _repeated_tugMissions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Att != 0F) {
        size += 1 + 4;
      }
      if (Def != 0F) {
        size += 1 + 4;
      }
      if (Scout != false) {
        size += 1 + 1;
      }
      if (Fighters != 0F) {
        size += 1 + 4;
      }
      if (HeavyFighterBonus != 0F) {
        size += 1 + 4;
      }
      if (Pfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pfs);
      }
      if (Drones != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drones);
      }
      if (Mauler != false) {
        size += 1 + 1;
      }
      size += tugMissions_.CalculateSize(_repeated_tugMissions_codec);
      return size;
    }

    public void MergeFrom(unit_def_side_t other) {
      if (other == null) {
        return;
      }
      if (other.Att != 0F) {
        Att = other.Att;
      }
      if (other.Def != 0F) {
        Def = other.Def;
      }
      if (other.Scout != false) {
        Scout = other.Scout;
      }
      if (other.Fighters != 0F) {
        Fighters = other.Fighters;
      }
      if (other.HeavyFighterBonus != 0F) {
        HeavyFighterBonus = other.HeavyFighterBonus;
      }
      if (other.Pfs != 0) {
        Pfs = other.Pfs;
      }
      if (other.Drones != 0) {
        Drones = other.Drones;
      }
      if (other.Mauler != false) {
        Mauler = other.Mauler;
      }
      tugMissions_.Add(other.tugMissions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Att = input.ReadFloat();
            break;
          }
          case 21: {
            Def = input.ReadFloat();
            break;
          }
          case 24: {
            Scout = input.ReadBool();
            break;
          }
          case 37: {
            Fighters = input.ReadFloat();
            break;
          }
          case 45: {
            HeavyFighterBonus = input.ReadFloat();
            break;
          }
          case 48: {
            Pfs = input.ReadInt32();
            break;
          }
          case 56: {
            Drones = input.ReadInt32();
            break;
          }
          case 64: {
            Mauler = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            tugMissions_.AddEntriesFrom(input, _repeated_tugMissions_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class towable_t : pb::IMessage<towable_t> {
    private static readonly pb::MessageParser<towable_t> _parser = new pb::MessageParser<towable_t>(() => new towable_t());
    public static pb::MessageParser<towable_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public towable_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public towable_t(towable_t other) : this() {
      moveCost_ = other.moveCost_;
      stratMoveLimit_ = other.stratMoveLimit_;
    }

    public towable_t Clone() {
      return new towable_t(this);
    }

    /// <summary>Field number for the "move_cost" field.</summary>
    public const int MoveCostFieldNumber = 1;
    private int moveCost_;
    public int MoveCost {
      get { return moveCost_; }
      set {
        moveCost_ = value;
      }
    }

    /// <summary>Field number for the "strat_move_limit" field.</summary>
    public const int StratMoveLimitFieldNumber = 2;
    private int stratMoveLimit_;
    public int StratMoveLimit {
      get { return stratMoveLimit_; }
      set {
        stratMoveLimit_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as towable_t);
    }

    public bool Equals(towable_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveCost != other.MoveCost) return false;
      if (StratMoveLimit != other.StratMoveLimit) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MoveCost != 0) hash ^= MoveCost.GetHashCode();
      if (StratMoveLimit != 0) hash ^= StratMoveLimit.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveCost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MoveCost);
      }
      if (StratMoveLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StratMoveLimit);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MoveCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveCost);
      }
      if (StratMoveLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StratMoveLimit);
      }
      return size;
    }

    public void MergeFrom(towable_t other) {
      if (other == null) {
        return;
      }
      if (other.MoveCost != 0) {
        MoveCost = other.MoveCost;
      }
      if (other.StratMoveLimit != 0) {
        StratMoveLimit = other.StratMoveLimit;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoveCost = input.ReadInt32();
            break;
          }
          case 16: {
            StratMoveLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class production_cost_t : pb::IMessage<production_cost_t> {
    private static readonly pb::MessageParser<production_cost_t> _parser = new pb::MessageParser<production_cost_t>(() => new production_cost_t());
    public static pb::MessageParser<production_cost_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public production_cost_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public production_cost_t(production_cost_t other) : this() {
      cost_ = other.cost_;
      fighterCost_ = other.fighterCost_;
    }

    public production_cost_t Clone() {
      return new production_cost_t(this);
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 1;
    private int cost_;
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "fighter_cost" field.</summary>
    public const int FighterCostFieldNumber = 2;
    private int fighterCost_;
    public int FighterCost {
      get { return fighterCost_; }
      set {
        fighterCost_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as production_cost_t);
    }

    public bool Equals(production_cost_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cost != other.Cost) return false;
      if (FighterCost != other.FighterCost) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (FighterCost != 0) hash ^= FighterCost.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Cost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cost);
      }
      if (FighterCost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FighterCost);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (FighterCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FighterCost);
      }
      return size;
    }

    public void MergeFrom(production_cost_t other) {
      if (other == null) {
        return;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.FighterCost != 0) {
        FighterCost = other.FighterCost;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cost = input.ReadInt32();
            break;
          }
          case 16: {
            FighterCost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class unit_def_t : pb::IMessage<unit_def_t> {
    private static readonly pb::MessageParser<unit_def_t> _parser = new pb::MessageParser<unit_def_t>(() => new unit_def_t());
    public static pb::MessageParser<unit_def_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public unit_def_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public unit_def_t(unit_def_t other) : this() {
      name_ = other.name_;
      cmd_ = other.cmd_;
      Uncrippled = other.uncrippled_ != null ? other.Uncrippled.Clone() : null;
      Crippled = other.crippled_ != null ? other.Crippled.Clone() : null;
      escortType_ = other.escortType_;
      Available = other.available_ != null ? other.Available.Clone() : null;
      pod_ = other.pod_;
      maxInService_ = other.maxInService_;
      Construction = other.construction_ != null ? other.Construction.Clone() : null;
      substitutions_ = other.substitutions_.Clone();
      conversions_ = other.conversions_.Clone();
      move_ = other.move_;
      carrierType_ = other.carrierType_;
      notSpaceworthy_ = other.notSpaceworthy_;
      Towable = other.towable_ != null ? other.Towable.Clone() : null;
      salvage_ = other.salvage_;
      notes_ = other.notes_;
    }

    public unit_def_t Clone() {
      return new unit_def_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private int cmd_;
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "uncrippled" field.</summary>
    public const int UncrippledFieldNumber = 3;
    private global::Message.unit_def_side_t uncrippled_;
    public global::Message.unit_def_side_t Uncrippled {
      get { return uncrippled_; }
      set {
        uncrippled_ = value;
      }
    }

    /// <summary>Field number for the "crippled" field.</summary>
    public const int CrippledFieldNumber = 4;
    private global::Message.unit_def_side_t crippled_;
    public global::Message.unit_def_side_t Crippled {
      get { return crippled_; }
      set {
        crippled_ = value;
      }
    }

    /// <summary>Field number for the "escort_type" field.</summary>
    public const int EscortTypeFieldNumber = 5;
    private global::Message.escort_type_t escortType_ = global::Message.escort_type_t.not_an_escort;
    public global::Message.escort_type_t EscortType {
      get { return escortType_; }
      set {
        escortType_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 6;
    private global::Message.turn_t available_;
    public global::Message.turn_t Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "pod" field.</summary>
    public const int PodFieldNumber = 7;
    private bool pod_;
    public bool Pod {
      get { return pod_; }
      set {
        pod_ = value;
      }
    }

    /// <summary>Field number for the "max_in_service" field.</summary>
    public const int MaxInServiceFieldNumber = 8;
    private int maxInService_;
    public int MaxInService {
      get { return maxInService_; }
      set {
        maxInService_ = value;
      }
    }

    /// <summary>Field number for the "construction" field.</summary>
    public const int ConstructionFieldNumber = 9;
    private global::Message.production_cost_t construction_;
    public global::Message.production_cost_t Construction {
      get { return construction_; }
      set {
        construction_ = value;
      }
    }

    /// <summary>Field number for the "substitutions" field.</summary>
    public const int SubstitutionsFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Message.production_cost_t>.Codec _map_substitutions_codec
        = new pbc::MapField<string, global::Message.production_cost_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.production_cost_t.Parser), 82);
    private readonly pbc::MapField<string, global::Message.production_cost_t> substitutions_ = new pbc::MapField<string, global::Message.production_cost_t>();
    public pbc::MapField<string, global::Message.production_cost_t> Substitutions {
      get { return substitutions_; }
    }

    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 11;
    private static readonly pbc::MapField<string, global::Message.production_cost_t>.Codec _map_conversions_codec
        = new pbc::MapField<string, global::Message.production_cost_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.production_cost_t.Parser), 90);
    private readonly pbc::MapField<string, global::Message.production_cost_t> conversions_ = new pbc::MapField<string, global::Message.production_cost_t>();
    public pbc::MapField<string, global::Message.production_cost_t> Conversions {
      get { return conversions_; }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 12;
    private int move_;
    public int Move {
      get { return move_; }
      set {
        move_ = value;
      }
    }

    /// <summary>Field number for the "carrier_type" field.</summary>
    public const int CarrierTypeFieldNumber = 13;
    private global::Message.carrier_type_t carrierType_ = global::Message.carrier_type_t.not_a_carrier;
    public global::Message.carrier_type_t CarrierType {
      get { return carrierType_; }
      set {
        carrierType_ = value;
      }
    }

    /// <summary>Field number for the "not_spaceworthy" field.</summary>
    public const int NotSpaceworthyFieldNumber = 14;
    private bool notSpaceworthy_;
    public bool NotSpaceworthy {
      get { return notSpaceworthy_; }
      set {
        notSpaceworthy_ = value;
      }
    }

    /// <summary>Field number for the "towable" field.</summary>
    public const int TowableFieldNumber = 15;
    private global::Message.towable_t towable_;
    public global::Message.towable_t Towable {
      get { return towable_; }
      set {
        towable_ = value;
      }
    }

    /// <summary>Field number for the "salvage" field.</summary>
    public const int SalvageFieldNumber = 16;
    private int salvage_;
    public int Salvage {
      get { return salvage_; }
      set {
        salvage_ = value;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 17;
    private string notes_ = "";
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as unit_def_t);
    }

    public bool Equals(unit_def_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Cmd != other.Cmd) return false;
      if (!object.Equals(Uncrippled, other.Uncrippled)) return false;
      if (!object.Equals(Crippled, other.Crippled)) return false;
      if (EscortType != other.EscortType) return false;
      if (!object.Equals(Available, other.Available)) return false;
      if (Pod != other.Pod) return false;
      if (MaxInService != other.MaxInService) return false;
      if (!object.Equals(Construction, other.Construction)) return false;
      if (!Substitutions.Equals(other.Substitutions)) return false;
      if (!Conversions.Equals(other.Conversions)) return false;
      if (Move != other.Move) return false;
      if (CarrierType != other.CarrierType) return false;
      if (NotSpaceworthy != other.NotSpaceworthy) return false;
      if (!object.Equals(Towable, other.Towable)) return false;
      if (Salvage != other.Salvage) return false;
      if (Notes != other.Notes) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (uncrippled_ != null) hash ^= Uncrippled.GetHashCode();
      if (crippled_ != null) hash ^= Crippled.GetHashCode();
      if (EscortType != global::Message.escort_type_t.not_an_escort) hash ^= EscortType.GetHashCode();
      if (available_ != null) hash ^= Available.GetHashCode();
      if (Pod != false) hash ^= Pod.GetHashCode();
      if (MaxInService != 0) hash ^= MaxInService.GetHashCode();
      if (construction_ != null) hash ^= Construction.GetHashCode();
      hash ^= Substitutions.GetHashCode();
      hash ^= Conversions.GetHashCode();
      if (Move != 0) hash ^= Move.GetHashCode();
      if (CarrierType != global::Message.carrier_type_t.not_a_carrier) hash ^= CarrierType.GetHashCode();
      if (NotSpaceworthy != false) hash ^= NotSpaceworthy.GetHashCode();
      if (towable_ != null) hash ^= Towable.GetHashCode();
      if (Salvage != 0) hash ^= Salvage.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Cmd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cmd);
      }
      if (uncrippled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uncrippled);
      }
      if (crippled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Crippled);
      }
      if (EscortType != global::Message.escort_type_t.not_an_escort) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EscortType);
      }
      if (available_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Available);
      }
      if (Pod != false) {
        output.WriteRawTag(56);
        output.WriteBool(Pod);
      }
      if (MaxInService != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxInService);
      }
      if (construction_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Construction);
      }
      substitutions_.WriteTo(output, _map_substitutions_codec);
      conversions_.WriteTo(output, _map_conversions_codec);
      if (Move != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Move);
      }
      if (CarrierType != global::Message.carrier_type_t.not_a_carrier) {
        output.WriteRawTag(104);
        output.WriteEnum((int) CarrierType);
      }
      if (NotSpaceworthy != false) {
        output.WriteRawTag(112);
        output.WriteBool(NotSpaceworthy);
      }
      if (towable_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Towable);
      }
      if (Salvage != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Salvage);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Notes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (uncrippled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uncrippled);
      }
      if (crippled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crippled);
      }
      if (EscortType != global::Message.escort_type_t.not_an_escort) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EscortType);
      }
      if (available_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Available);
      }
      if (Pod != false) {
        size += 1 + 1;
      }
      if (MaxInService != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxInService);
      }
      if (construction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Construction);
      }
      size += substitutions_.CalculateSize(_map_substitutions_codec);
      size += conversions_.CalculateSize(_map_conversions_codec);
      if (Move != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move);
      }
      if (CarrierType != global::Message.carrier_type_t.not_a_carrier) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CarrierType);
      }
      if (NotSpaceworthy != false) {
        size += 1 + 1;
      }
      if (towable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Towable);
      }
      if (Salvage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Salvage);
      }
      if (Notes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      return size;
    }

    public void MergeFrom(unit_def_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.uncrippled_ != null) {
        if (uncrippled_ == null) {
          uncrippled_ = new global::Message.unit_def_side_t();
        }
        Uncrippled.MergeFrom(other.Uncrippled);
      }
      if (other.crippled_ != null) {
        if (crippled_ == null) {
          crippled_ = new global::Message.unit_def_side_t();
        }
        Crippled.MergeFrom(other.Crippled);
      }
      if (other.EscortType != global::Message.escort_type_t.not_an_escort) {
        EscortType = other.EscortType;
      }
      if (other.available_ != null) {
        if (available_ == null) {
          available_ = new global::Message.turn_t();
        }
        Available.MergeFrom(other.Available);
      }
      if (other.Pod != false) {
        Pod = other.Pod;
      }
      if (other.MaxInService != 0) {
        MaxInService = other.MaxInService;
      }
      if (other.construction_ != null) {
        if (construction_ == null) {
          construction_ = new global::Message.production_cost_t();
        }
        Construction.MergeFrom(other.Construction);
      }
      substitutions_.Add(other.substitutions_);
      conversions_.Add(other.conversions_);
      if (other.Move != 0) {
        Move = other.Move;
      }
      if (other.CarrierType != global::Message.carrier_type_t.not_a_carrier) {
        CarrierType = other.CarrierType;
      }
      if (other.NotSpaceworthy != false) {
        NotSpaceworthy = other.NotSpaceworthy;
      }
      if (other.towable_ != null) {
        if (towable_ == null) {
          towable_ = new global::Message.towable_t();
        }
        Towable.MergeFrom(other.Towable);
      }
      if (other.Salvage != 0) {
        Salvage = other.Salvage;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Cmd = input.ReadInt32();
            break;
          }
          case 26: {
            if (uncrippled_ == null) {
              uncrippled_ = new global::Message.unit_def_side_t();
            }
            input.ReadMessage(uncrippled_);
            break;
          }
          case 34: {
            if (crippled_ == null) {
              crippled_ = new global::Message.unit_def_side_t();
            }
            input.ReadMessage(crippled_);
            break;
          }
          case 40: {
            escortType_ = (global::Message.escort_type_t) input.ReadEnum();
            break;
          }
          case 50: {
            if (available_ == null) {
              available_ = new global::Message.turn_t();
            }
            input.ReadMessage(available_);
            break;
          }
          case 56: {
            Pod = input.ReadBool();
            break;
          }
          case 64: {
            MaxInService = input.ReadInt32();
            break;
          }
          case 74: {
            if (construction_ == null) {
              construction_ = new global::Message.production_cost_t();
            }
            input.ReadMessage(construction_);
            break;
          }
          case 82: {
            substitutions_.AddEntriesFrom(input, _map_substitutions_codec);
            break;
          }
          case 90: {
            conversions_.AddEntriesFrom(input, _map_conversions_codec);
            break;
          }
          case 96: {
            Move = input.ReadInt32();
            break;
          }
          case 104: {
            carrierType_ = (global::Message.carrier_type_t) input.ReadEnum();
            break;
          }
          case 112: {
            NotSpaceworthy = input.ReadBool();
            break;
          }
          case 122: {
            if (towable_ == null) {
              towable_ = new global::Message.towable_t();
            }
            input.ReadMessage(towable_);
            break;
          }
          case 128: {
            Salvage = input.ReadInt32();
            break;
          }
          case 138: {
            Notes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class nation_unit_defs_t : pb::IMessage<nation_unit_defs_t> {
    private static readonly pb::MessageParser<nation_unit_defs_t> _parser = new pb::MessageParser<nation_unit_defs_t>(() => new nation_unit_defs_t());
    public static pb::MessageParser<nation_unit_defs_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public nation_unit_defs_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public nation_unit_defs_t(nation_unit_defs_t other) : this() {
      units_ = other.units_.Clone();
    }

    public nation_unit_defs_t Clone() {
      return new nation_unit_defs_t(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Message.unit_def_t> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Message.unit_def_t.Parser);
    private readonly pbc::RepeatedField<global::Message.unit_def_t> units_ = new pbc::RepeatedField<global::Message.unit_def_t>();
    public pbc::RepeatedField<global::Message.unit_def_t> Units {
      get { return units_; }
    }

    public override bool Equals(object other) {
      return Equals(other as nation_unit_defs_t);
    }

    public bool Equals(nation_unit_defs_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!units_.Equals(other.units_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= units_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(nation_unit_defs_t other) {
      if (other == null) {
        return;
      }
      units_.Add(other.units_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class unit_defs_t : pb::IMessage<unit_defs_t> {
    private static readonly pb::MessageParser<unit_defs_t> _parser = new pb::MessageParser<unit_defs_t>(() => new unit_defs_t());
    public static pb::MessageParser<unit_defs_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public unit_defs_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public unit_defs_t(unit_defs_t other) : this() {
      nationUnits_ = other.nationUnits_.Clone();
    }

    public unit_defs_t Clone() {
      return new unit_defs_t(this);
    }

    /// <summary>Field number for the "nation_units" field.</summary>
    public const int NationUnitsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Message.nation_unit_defs_t>.Codec _map_nationUnits_codec
        = new pbc::MapField<string, global::Message.nation_unit_defs_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.nation_unit_defs_t.Parser), 10);
    private readonly pbc::MapField<string, global::Message.nation_unit_defs_t> nationUnits_ = new pbc::MapField<string, global::Message.nation_unit_defs_t>();
    public pbc::MapField<string, global::Message.nation_unit_defs_t> NationUnits {
      get { return nationUnits_; }
    }

    public override bool Equals(object other) {
      return Equals(other as unit_defs_t);
    }

    public bool Equals(unit_defs_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!NationUnits.Equals(other.NationUnits)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= NationUnits.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      nationUnits_.WriteTo(output, _map_nationUnits_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += nationUnits_.CalculateSize(_map_nationUnits_codec);
      return size;
    }

    public void MergeFrom(unit_defs_t other) {
      if (other == null) {
        return;
      }
      nationUnits_.Add(other.nationUnits_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nationUnits_.AddEntriesFrom(input, _map_nationUnits_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class team_t : pb::IMessage<team_t> {
    private static readonly pb::MessageParser<team_t> _parser = new pb::MessageParser<team_t>(() => new team_t());
    public static pb::MessageParser<team_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public team_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public team_t(team_t other) : this() {
      name_ = other.name_;
      nations_ = other.nations_.Clone();
    }

    public team_t Clone() {
      return new team_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_nations_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> nations_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Nations {
      get { return nations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as team_t);
    }

    public bool Equals(team_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!nations_.Equals(other.nations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= nations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      nations_.WriteTo(output, _repeated_nations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += nations_.CalculateSize(_repeated_nations_codec);
      return size;
    }

    public void MergeFrom(team_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      nations_.Add(other.nations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            nations_.AddEntriesFrom(input, _repeated_nations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class scenario_condition_t : pb::IMessage<scenario_condition_t> {
    private static readonly pb::MessageParser<scenario_condition_t> _parser = new pb::MessageParser<scenario_condition_t>(() => new scenario_condition_t());
    public static pb::MessageParser<scenario_condition_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public scenario_condition_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public scenario_condition_t(scenario_condition_t other) : this() {
      actors_ = other.actors_.Clone();
      action_ = other.action_;
      oneOf_ = other.oneOf_.Clone();
    }

    public scenario_condition_t Clone() {
      return new scenario_condition_t(this);
    }

    /// <summary>Field number for the "actors" field.</summary>
    public const int ActorsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_actors_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> actors_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Actors {
      get { return actors_; }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::Message.scenario_condition_t.Types.action_t action_ = global::Message.scenario_condition_t.Types.action_t.occupies;
    public global::Message.scenario_condition_t.Types.action_t Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "one_of" field.</summary>
    public const int OneOfFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Message.scenario_condition_t.Types.object_t> _repeated_oneOf_codec
        = pb::FieldCodec.ForMessage(26, global::Message.scenario_condition_t.Types.object_t.Parser);
    private readonly pbc::RepeatedField<global::Message.scenario_condition_t.Types.object_t> oneOf_ = new pbc::RepeatedField<global::Message.scenario_condition_t.Types.object_t>();
    public pbc::RepeatedField<global::Message.scenario_condition_t.Types.object_t> OneOf {
      get { return oneOf_; }
    }

    public override bool Equals(object other) {
      return Equals(other as scenario_condition_t);
    }

    public bool Equals(scenario_condition_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actors_.Equals(other.actors_)) return false;
      if (Action != other.Action) return false;
      if(!oneOf_.Equals(other.oneOf_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= actors_.GetHashCode();
      if (Action != global::Message.scenario_condition_t.Types.action_t.occupies) hash ^= Action.GetHashCode();
      hash ^= oneOf_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      actors_.WriteTo(output, _repeated_actors_codec);
      if (Action != global::Message.scenario_condition_t.Types.action_t.occupies) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      oneOf_.WriteTo(output, _repeated_oneOf_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += actors_.CalculateSize(_repeated_actors_codec);
      if (Action != global::Message.scenario_condition_t.Types.action_t.occupies) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      size += oneOf_.CalculateSize(_repeated_oneOf_codec);
      return size;
    }

    public void MergeFrom(scenario_condition_t other) {
      if (other == null) {
        return;
      }
      actors_.Add(other.actors_);
      if (other.Action != global::Message.scenario_condition_t.Types.action_t.occupies) {
        Action = other.Action;
      }
      oneOf_.Add(other.oneOf_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            actors_.AddEntriesFrom(input, _repeated_actors_codec);
            break;
          }
          case 16: {
            action_ = (global::Message.scenario_condition_t.Types.action_t) input.ReadEnum();
            break;
          }
          case 26: {
            oneOf_.AddEntriesFrom(input, _repeated_oneOf_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the scenario_condition_t message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum action_t {
        occupies = 0,
        destroys = 1,
      }

      public enum object_type_t {
        hexes = 0,
        sb = 1,
        fleet_area = 2,
        nation = 3,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class object_t : pb::IMessage<object_t> {
        private static readonly pb::MessageParser<object_t> _parser = new pb::MessageParser<object_t>(() => new object_t());
        public static pb::MessageParser<object_t> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Message.scenario_condition_t.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public object_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        public object_t(object_t other) : this() {
          type_ = other.type_;
          names_ = other.names_.Clone();
          hexes_ = other.hexes_.Clone();
        }

        public object_t Clone() {
          return new object_t(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Message.scenario_condition_t.Types.object_type_t type_ = global::Message.scenario_condition_t.Types.object_type_t.hexes;
        public global::Message.scenario_condition_t.Types.object_type_t Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "names" field.</summary>
        public const int NamesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_names_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
        public pbc::RepeatedField<string> Names {
          get { return names_; }
        }

        /// <summary>Field number for the "hexes" field.</summary>
        public const int HexesFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_hexes_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> hexes_ = new pbc::RepeatedField<int>();
        public pbc::RepeatedField<int> Hexes {
          get { return hexes_; }
        }

        public override bool Equals(object other) {
          return Equals(other as object_t);
        }

        public bool Equals(object_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if(!names_.Equals(other.names_)) return false;
          if(!hexes_.Equals(other.hexes_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Type != global::Message.scenario_condition_t.Types.object_type_t.hexes) hash ^= Type.GetHashCode();
          hash ^= names_.GetHashCode();
          hash ^= hexes_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != global::Message.scenario_condition_t.Types.object_type_t.hexes) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          names_.WriteTo(output, _repeated_names_codec);
          hexes_.WriteTo(output, _repeated_hexes_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Type != global::Message.scenario_condition_t.Types.object_type_t.hexes) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          size += names_.CalculateSize(_repeated_names_codec);
          size += hexes_.CalculateSize(_repeated_hexes_codec);
          return size;
        }

        public void MergeFrom(object_t other) {
          if (other == null) {
            return;
          }
          if (other.Type != global::Message.scenario_condition_t.Types.object_type_t.hexes) {
            Type = other.Type;
          }
          names_.Add(other.names_);
          hexes_.Add(other.hexes_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::Message.scenario_condition_t.Types.object_type_t) input.ReadEnum();
                break;
              }
              case 18: {
                names_.AddEntriesFrom(input, _repeated_names_codec);
                break;
              }
              case 26:
              case 24: {
                hexes_.AddEntriesFrom(input, _repeated_hexes_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class fleet_release_condition_t : pb::IMessage<fleet_release_condition_t> {
    private static readonly pb::MessageParser<fleet_release_condition_t> _parser = new pb::MessageParser<fleet_release_condition_t>(() => new fleet_release_condition_t());
    public static pb::MessageParser<fleet_release_condition_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[29]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public fleet_release_condition_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public fleet_release_condition_t(fleet_release_condition_t other) : this() {
      fleet_ = other.fleet_;
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
    }

    public fleet_release_condition_t Clone() {
      return new fleet_release_condition_t(this);
    }

    /// <summary>Field number for the "fleet" field.</summary>
    public const int FleetFieldNumber = 1;
    private string fleet_ = "";
    public string Fleet {
      get { return fleet_; }
      set {
        fleet_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private global::Message.scenario_condition_t condition_;
    public global::Message.scenario_condition_t Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as fleet_release_condition_t);
    }

    public bool Equals(fleet_release_condition_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fleet != other.Fleet) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Fleet.Length != 0) hash ^= Fleet.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fleet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fleet);
      }
      if (condition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Condition);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Fleet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fleet);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    public void MergeFrom(fleet_release_condition_t other) {
      if (other == null) {
        return;
      }
      if (other.Fleet.Length != 0) {
        Fleet = other.Fleet;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Message.scenario_condition_t();
        }
        Condition.MergeFrom(other.Condition);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Fleet = input.ReadString();
            break;
          }
          case 18: {
            if (condition_ == null) {
              condition_ = new global::Message.scenario_condition_t();
            }
            input.ReadMessage(condition_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class war_entry_condition_t : pb::IMessage<war_entry_condition_t> {
    private static readonly pb::MessageParser<war_entry_condition_t> _parser = new pb::MessageParser<war_entry_condition_t>(() => new war_entry_condition_t());
    public static pb::MessageParser<war_entry_condition_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[30]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public war_entry_condition_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public war_entry_condition_t(war_entry_condition_t other) : this() {
      economy_ = other.economy_;
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
    }

    public war_entry_condition_t Clone() {
      return new war_entry_condition_t(this);
    }

    /// <summary>Field number for the "economy" field.</summary>
    public const int EconomyFieldNumber = 3;
    private global::Message.war_footing_t economy_ = global::Message.war_footing_t.war;
    public global::Message.war_footing_t Economy {
      get { return economy_; }
      set {
        economy_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private global::Message.scenario_condition_t condition_;
    public global::Message.scenario_condition_t Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as war_entry_condition_t);
    }

    public bool Equals(war_entry_condition_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Economy != other.Economy) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Economy != global::Message.war_footing_t.war) hash ^= Economy.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (condition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Condition);
      }
      if (Economy != global::Message.war_footing_t.war) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Economy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Economy != global::Message.war_footing_t.war) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Economy);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    public void MergeFrom(war_entry_condition_t other) {
      if (other == null) {
        return;
      }
      if (other.Economy != global::Message.war_footing_t.war) {
        Economy = other.Economy;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Message.scenario_condition_t();
        }
        Condition.MergeFrom(other.Condition);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (condition_ == null) {
              condition_ = new global::Message.scenario_condition_t();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 24: {
            economy_ = (global::Message.war_footing_t) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class scenario_turn_t : pb::IMessage<scenario_turn_t> {
    private static readonly pb::MessageParser<scenario_turn_t> _parser = new pb::MessageParser<scenario_turn_t>(() => new scenario_turn_t());
    public static pb::MessageParser<scenario_turn_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[31]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public scenario_turn_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public scenario_turn_t(scenario_turn_t other) : this() {
      turn_ = other.turn_;
      nationalActions_ = other.nationalActions_.Clone();
    }

    public scenario_turn_t Clone() {
      return new scenario_turn_t(this);
    }

    /// <summary>Field number for the "turn" field.</summary>
    public const int TurnFieldNumber = 1;
    private int turn_;
    public int Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    /// <summary>Field number for the "national_actions" field.</summary>
    public const int NationalActionsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Message.scenario_turn_t.Types.national_action_t>.Codec _map_nationalActions_codec
        = new pbc::MapField<string, global::Message.scenario_turn_t.Types.national_action_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.scenario_turn_t.Types.national_action_t.Parser), 18);
    private readonly pbc::MapField<string, global::Message.scenario_turn_t.Types.national_action_t> nationalActions_ = new pbc::MapField<string, global::Message.scenario_turn_t.Types.national_action_t>();
    public pbc::MapField<string, global::Message.scenario_turn_t.Types.national_action_t> NationalActions {
      get { return nationalActions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as scenario_turn_t);
    }

    public bool Equals(scenario_turn_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Turn != other.Turn) return false;
      if (!NationalActions.Equals(other.NationalActions)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Turn != 0) hash ^= Turn.GetHashCode();
      hash ^= NationalActions.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Turn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Turn);
      }
      nationalActions_.WriteTo(output, _map_nationalActions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Turn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turn);
      }
      size += nationalActions_.CalculateSize(_map_nationalActions_codec);
      return size;
    }

    public void MergeFrom(scenario_turn_t other) {
      if (other == null) {
        return;
      }
      if (other.Turn != 0) {
        Turn = other.Turn;
      }
      nationalActions_.Add(other.nationalActions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Turn = input.ReadInt32();
            break;
          }
          case 18: {
            nationalActions_.AddEntriesFrom(input, _map_nationalActions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the scenario_turn_t message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class national_action_t : pb::IMessage<national_action_t> {
        private static readonly pb::MessageParser<national_action_t> _parser = new pb::MessageParser<national_action_t>(() => new national_action_t());
        public static pb::MessageParser<national_action_t> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Message.scenario_turn_t.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public national_action_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        public national_action_t(national_action_t other) : this() {
          actions_ = other.actions_.Clone();
        }

        public national_action_t Clone() {
          return new national_action_t(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Message.scenario_turn_t.Types.national_action_t.Types.action_t> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, global::Message.scenario_turn_t.Types.national_action_t.Types.action_t.Parser);
        private readonly pbc::RepeatedField<global::Message.scenario_turn_t.Types.national_action_t.Types.action_t> actions_ = new pbc::RepeatedField<global::Message.scenario_turn_t.Types.national_action_t.Types.action_t>();
        public pbc::RepeatedField<global::Message.scenario_turn_t.Types.national_action_t.Types.action_t> Actions {
          get { return actions_; }
        }

        public override bool Equals(object other) {
          return Equals(other as national_action_t);
        }

        public bool Equals(national_action_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!actions_.Equals(other.actions_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          hash ^= actions_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          actions_.WriteTo(output, _repeated_actions_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += actions_.CalculateSize(_repeated_actions_codec);
          return size;
        }

        public void MergeFrom(national_action_t other) {
          if (other == null) {
            return;
          }
          actions_.Add(other.actions_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                actions_.AddEntriesFrom(input, _repeated_actions_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the national_action_t message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          public enum action_type_t {
            release_fleets = 0,
            declare_war = 1,
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class action_t : pb::IMessage<action_t> {
            private static readonly pb::MessageParser<action_t> _parser = new pb::MessageParser<action_t>(() => new action_t());
            public static pb::MessageParser<action_t> Parser { get { return _parser; } }

            public static pbr::MessageDescriptor Descriptor {
              get { return global::Message.scenario_turn_t.Types.national_action_t.Descriptor.NestedTypes[0]; }
            }

            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            public action_t() {
              OnConstruction();
            }

            partial void OnConstruction();

            public action_t(action_t other) : this() {
              type_ = other.type_;
              names_ = other.names_.Clone();
            }

            public action_t Clone() {
              return new action_t(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t type_ = global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t.release_fleets;
            public global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "names" field.</summary>
            public const int NamesFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_names_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
            public pbc::RepeatedField<string> Names {
              get { return names_; }
            }

            public override bool Equals(object other) {
              return Equals(other as action_t);
            }

            public bool Equals(action_t other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if(!names_.Equals(other.names_)) return false;
              return true;
            }

            public override int GetHashCode() {
              int hash = 1;
              if (Type != global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t.release_fleets) hash ^= Type.GetHashCode();
              hash ^= names_.GetHashCode();
              return hash;
            }

            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t.release_fleets) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              names_.WriteTo(output, _repeated_names_codec);
            }

            public int CalculateSize() {
              int size = 0;
              if (Type != global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t.release_fleets) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              size += names_.CalculateSize(_repeated_names_codec);
              return size;
            }

            public void MergeFrom(action_t other) {
              if (other == null) {
                return;
              }
              if (other.Type != global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t.release_fleets) {
                Type = other.Type;
              }
              names_.Add(other.names_);
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    type_ = (global::Message.scenario_turn_t.Types.national_action_t.Types.action_type_t) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    names_.AddEntriesFrom(input, _repeated_names_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class scenario_t : pb::IMessage<scenario_t> {
    private static readonly pb::MessageParser<scenario_t> _parser = new pb::MessageParser<scenario_t>(() => new scenario_t());
    public static pb::MessageParser<scenario_t> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Message.ModelReflection.Descriptor.MessageTypes[32]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public scenario_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    public scenario_t(scenario_t other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      StartTurn = other.startTurn_ != null ? other.StartTurn.Clone() : null;
      teams_ = other.teams_.Clone();
      teamTurnOrder_ = other.teamTurnOrder_.Clone();
      map_ = other.map_;
      orderOfBattle_ = other.orderOfBattle_;
      setupOrder_ = other.setupOrder_.Clone();
      nations_ = other.nations_.Clone();
      turns_ = other.turns_.Clone();
    }

    public scenario_t Clone() {
      return new scenario_t(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_turn" field.</summary>
    public const int StartTurnFieldNumber = 3;
    private global::Message.turn_t startTurn_;
    public global::Message.turn_t StartTurn {
      get { return startTurn_; }
      set {
        startTurn_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Message.team_t> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(34, global::Message.team_t.Parser);
    private readonly pbc::RepeatedField<global::Message.team_t> teams_ = new pbc::RepeatedField<global::Message.team_t>();
    public pbc::RepeatedField<global::Message.team_t> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "team_turn_order" field.</summary>
    public const int TeamTurnOrderFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_teamTurnOrder_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> teamTurnOrder_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TeamTurnOrder {
      get { return teamTurnOrder_; }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 6;
    private string map_ = "";
    public string Map {
      get { return map_; }
      set {
        map_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_of_battle" field.</summary>
    public const int OrderOfBattleFieldNumber = 7;
    private string orderOfBattle_ = "";
    public string OrderOfBattle {
      get { return orderOfBattle_; }
      set {
        orderOfBattle_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setup_order" field.</summary>
    public const int SetupOrderFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_setupOrder_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> setupOrder_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> SetupOrder {
      get { return setupOrder_; }
    }

    /// <summary>Field number for the "nations" field.</summary>
    public const int NationsFieldNumber = 9;
    private static readonly pbc::MapField<string, global::Message.scenario_t.Types.nation_t>.Codec _map_nations_codec
        = new pbc::MapField<string, global::Message.scenario_t.Types.nation_t>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Message.scenario_t.Types.nation_t.Parser), 74);
    private readonly pbc::MapField<string, global::Message.scenario_t.Types.nation_t> nations_ = new pbc::MapField<string, global::Message.scenario_t.Types.nation_t>();
    public pbc::MapField<string, global::Message.scenario_t.Types.nation_t> Nations {
      get { return nations_; }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Message.scenario_turn_t> _repeated_turns_codec
        = pb::FieldCodec.ForMessage(82, global::Message.scenario_turn_t.Parser);
    private readonly pbc::RepeatedField<global::Message.scenario_turn_t> turns_ = new pbc::RepeatedField<global::Message.scenario_turn_t>();
    public pbc::RepeatedField<global::Message.scenario_turn_t> Turns {
      get { return turns_; }
    }

    public override bool Equals(object other) {
      return Equals(other as scenario_t);
    }

    public bool Equals(scenario_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(StartTurn, other.StartTurn)) return false;
      if(!teams_.Equals(other.teams_)) return false;
      if(!teamTurnOrder_.Equals(other.teamTurnOrder_)) return false;
      if (Map != other.Map) return false;
      if (OrderOfBattle != other.OrderOfBattle) return false;
      if(!setupOrder_.Equals(other.setupOrder_)) return false;
      if (!Nations.Equals(other.Nations)) return false;
      if(!turns_.Equals(other.turns_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (startTurn_ != null) hash ^= StartTurn.GetHashCode();
      hash ^= teams_.GetHashCode();
      hash ^= teamTurnOrder_.GetHashCode();
      if (Map.Length != 0) hash ^= Map.GetHashCode();
      if (OrderOfBattle.Length != 0) hash ^= OrderOfBattle.GetHashCode();
      hash ^= setupOrder_.GetHashCode();
      hash ^= Nations.GetHashCode();
      hash ^= turns_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (startTurn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTurn);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      teamTurnOrder_.WriteTo(output, _repeated_teamTurnOrder_codec);
      if (Map.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Map);
      }
      if (OrderOfBattle.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderOfBattle);
      }
      setupOrder_.WriteTo(output, _repeated_setupOrder_codec);
      nations_.WriteTo(output, _map_nations_codec);
      turns_.WriteTo(output, _repeated_turns_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (startTurn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTurn);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += teamTurnOrder_.CalculateSize(_repeated_teamTurnOrder_codec);
      if (Map.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Map);
      }
      if (OrderOfBattle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderOfBattle);
      }
      size += setupOrder_.CalculateSize(_repeated_setupOrder_codec);
      size += nations_.CalculateSize(_map_nations_codec);
      size += turns_.CalculateSize(_repeated_turns_codec);
      return size;
    }

    public void MergeFrom(scenario_t other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.startTurn_ != null) {
        if (startTurn_ == null) {
          startTurn_ = new global::Message.turn_t();
        }
        StartTurn.MergeFrom(other.StartTurn);
      }
      teams_.Add(other.teams_);
      teamTurnOrder_.Add(other.teamTurnOrder_);
      if (other.Map.Length != 0) {
        Map = other.Map;
      }
      if (other.OrderOfBattle.Length != 0) {
        OrderOfBattle = other.OrderOfBattle;
      }
      setupOrder_.Add(other.setupOrder_);
      nations_.Add(other.nations_);
      turns_.Add(other.turns_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (startTurn_ == null) {
              startTurn_ = new global::Message.turn_t();
            }
            input.ReadMessage(startTurn_);
            break;
          }
          case 34: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 42: {
            teamTurnOrder_.AddEntriesFrom(input, _repeated_teamTurnOrder_codec);
            break;
          }
          case 50: {
            Map = input.ReadString();
            break;
          }
          case 58: {
            OrderOfBattle = input.ReadString();
            break;
          }
          case 66: {
            setupOrder_.AddEntriesFrom(input, _repeated_setupOrder_codec);
            break;
          }
          case 74: {
            nations_.AddEntriesFrom(input, _map_nations_codec);
            break;
          }
          case 82: {
            turns_.AddEntriesFrom(input, _repeated_turns_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the scenario_t message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class nation_t : pb::IMessage<nation_t> {
        private static readonly pb::MessageParser<nation_t> _parser = new pb::MessageParser<nation_t>(() => new nation_t());
        public static pb::MessageParser<nation_t> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Message.scenario_t.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public nation_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        public nation_t(nation_t other) : this() {
          atWarWith_ = other.atWarWith_.Clone();
          futureBelligerents_ = other.futureBelligerents_.Clone();
          economy_ = other.economy_;
          exhaustionTurns_ = other.exhaustionTurns_;
          accumulateExhaustionAtPeace_ = other.accumulateExhaustionAtPeace_;
          releaseConditions_ = other.releaseConditions_.Clone();
          warEntryConditions_ = other.warEntryConditions_.Clone();
        }

        public nation_t Clone() {
          return new nation_t(this);
        }

        /// <summary>Field number for the "at_war_with" field.</summary>
        public const int AtWarWithFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_atWarWith_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> atWarWith_ = new pbc::RepeatedField<string>();
        public pbc::RepeatedField<string> AtWarWith {
          get { return atWarWith_; }
        }

        /// <summary>Field number for the "future_belligerents" field.</summary>
        public const int FutureBelligerentsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_futureBelligerents_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> futureBelligerents_ = new pbc::RepeatedField<string>();
        public pbc::RepeatedField<string> FutureBelligerents {
          get { return futureBelligerents_; }
        }

        /// <summary>Field number for the "economy" field.</summary>
        public const int EconomyFieldNumber = 3;
        private global::Message.war_footing_t economy_ = global::Message.war_footing_t.war;
        public global::Message.war_footing_t Economy {
          get { return economy_; }
          set {
            economy_ = value;
          }
        }

        /// <summary>Field number for the "exhaustion_turns" field.</summary>
        public const int ExhaustionTurnsFieldNumber = 4;
        private int exhaustionTurns_;
        public int ExhaustionTurns {
          get { return exhaustionTurns_; }
          set {
            exhaustionTurns_ = value;
          }
        }

        /// <summary>Field number for the "accumulate_exhaustion_at_peace" field.</summary>
        public const int AccumulateExhaustionAtPeaceFieldNumber = 5;
        private bool accumulateExhaustionAtPeace_;
        public bool AccumulateExhaustionAtPeace {
          get { return accumulateExhaustionAtPeace_; }
          set {
            accumulateExhaustionAtPeace_ = value;
          }
        }

        /// <summary>Field number for the "release_conditions" field.</summary>
        public const int ReleaseConditionsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Message.fleet_release_condition_t> _repeated_releaseConditions_codec
            = pb::FieldCodec.ForMessage(50, global::Message.fleet_release_condition_t.Parser);
        private readonly pbc::RepeatedField<global::Message.fleet_release_condition_t> releaseConditions_ = new pbc::RepeatedField<global::Message.fleet_release_condition_t>();
        public pbc::RepeatedField<global::Message.fleet_release_condition_t> ReleaseConditions {
          get { return releaseConditions_; }
        }

        /// <summary>Field number for the "war_entry_conditions" field.</summary>
        public const int WarEntryConditionsFieldNumber = 7;
        private static readonly pb::FieldCodec<global::Message.war_entry_condition_t> _repeated_warEntryConditions_codec
            = pb::FieldCodec.ForMessage(58, global::Message.war_entry_condition_t.Parser);
        private readonly pbc::RepeatedField<global::Message.war_entry_condition_t> warEntryConditions_ = new pbc::RepeatedField<global::Message.war_entry_condition_t>();
        public pbc::RepeatedField<global::Message.war_entry_condition_t> WarEntryConditions {
          get { return warEntryConditions_; }
        }

        public override bool Equals(object other) {
          return Equals(other as nation_t);
        }

        public bool Equals(nation_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!atWarWith_.Equals(other.atWarWith_)) return false;
          if(!futureBelligerents_.Equals(other.futureBelligerents_)) return false;
          if (Economy != other.Economy) return false;
          if (ExhaustionTurns != other.ExhaustionTurns) return false;
          if (AccumulateExhaustionAtPeace != other.AccumulateExhaustionAtPeace) return false;
          if(!releaseConditions_.Equals(other.releaseConditions_)) return false;
          if(!warEntryConditions_.Equals(other.warEntryConditions_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          hash ^= atWarWith_.GetHashCode();
          hash ^= futureBelligerents_.GetHashCode();
          if (Economy != global::Message.war_footing_t.war) hash ^= Economy.GetHashCode();
          if (ExhaustionTurns != 0) hash ^= ExhaustionTurns.GetHashCode();
          if (AccumulateExhaustionAtPeace != false) hash ^= AccumulateExhaustionAtPeace.GetHashCode();
          hash ^= releaseConditions_.GetHashCode();
          hash ^= warEntryConditions_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          atWarWith_.WriteTo(output, _repeated_atWarWith_codec);
          futureBelligerents_.WriteTo(output, _repeated_futureBelligerents_codec);
          if (Economy != global::Message.war_footing_t.war) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Economy);
          }
          if (ExhaustionTurns != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ExhaustionTurns);
          }
          if (AccumulateExhaustionAtPeace != false) {
            output.WriteRawTag(40);
            output.WriteBool(AccumulateExhaustionAtPeace);
          }
          releaseConditions_.WriteTo(output, _repeated_releaseConditions_codec);
          warEntryConditions_.WriteTo(output, _repeated_warEntryConditions_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += atWarWith_.CalculateSize(_repeated_atWarWith_codec);
          size += futureBelligerents_.CalculateSize(_repeated_futureBelligerents_codec);
          if (Economy != global::Message.war_footing_t.war) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Economy);
          }
          if (ExhaustionTurns != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExhaustionTurns);
          }
          if (AccumulateExhaustionAtPeace != false) {
            size += 1 + 1;
          }
          size += releaseConditions_.CalculateSize(_repeated_releaseConditions_codec);
          size += warEntryConditions_.CalculateSize(_repeated_warEntryConditions_codec);
          return size;
        }

        public void MergeFrom(nation_t other) {
          if (other == null) {
            return;
          }
          atWarWith_.Add(other.atWarWith_);
          futureBelligerents_.Add(other.futureBelligerents_);
          if (other.Economy != global::Message.war_footing_t.war) {
            Economy = other.Economy;
          }
          if (other.ExhaustionTurns != 0) {
            ExhaustionTurns = other.ExhaustionTurns;
          }
          if (other.AccumulateExhaustionAtPeace != false) {
            AccumulateExhaustionAtPeace = other.AccumulateExhaustionAtPeace;
          }
          releaseConditions_.Add(other.releaseConditions_);
          warEntryConditions_.Add(other.warEntryConditions_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                atWarWith_.AddEntriesFrom(input, _repeated_atWarWith_codec);
                break;
              }
              case 18: {
                futureBelligerents_.AddEntriesFrom(input, _repeated_futureBelligerents_codec);
                break;
              }
              case 24: {
                economy_ = (global::Message.war_footing_t) input.ReadEnum();
                break;
              }
              case 32: {
                ExhaustionTurns = input.ReadInt32();
                break;
              }
              case 40: {
                AccumulateExhaustionAtPeace = input.ReadBool();
                break;
              }
              case 50: {
                releaseConditions_.AddEntriesFrom(input, _repeated_releaseConditions_codec);
                break;
              }
              case 58: {
                warEntryConditions_.AddEntriesFrom(input, _repeated_warEntryConditions_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
