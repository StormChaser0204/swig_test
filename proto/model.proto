syntax = "proto3";

package message;


enum feature_t {
    no_feature = 0;
    bats = 1;
    sb = 2;
    min = 3;
    maj = 4;
    capital = 5;
}

enum season_t {
    spring = 0;
    fall = 1;
}

enum tug_mission_t {
    A = 0;
    B = 1;
    C = 2;
    D = 3;
    E = 4;
    F = 5;
    G = 6;
    H = 7;
    I = 8;
    J1 = 9;
    J2 = 10;
    K1 = 11;
    K2 = 12;
    L = 13;
    M = 14;
    N = 15;
    O = 16;
}

enum carrier_type_t {
    not_a_carrier = 0;
    single_ship_carrier = 1;
    light_carrier = 2;
    medium_carrier = 3;
    heavy_carrier = 4;
}

enum escort_type_t {
    not_an_escort = 0;
    light_escort = 1;
    heavy_escort = 2;
}

message turn_t
{
    int32 year = 1;
    season_t season = 2;
}

message hex_coord_t
{
    int32 x = 1;
    int32 y = 2;
}

// nations messages
message capital_hex_zone_t
{
    string name = 1;
    repeated feature_t features = 2 [packed=true];
}

message capital_hex_t
{
    int32 coord = 1;
    repeated capital_hex_zone_t zones = 2;
}

message capital_t
{
    repeated capital_hex_t hexes = 1;
}

message offmap_possesions_t
{
    int32 provinces = 1;
    int32 mins = 2;
    int32 majs = 3;
    int32 survey_ships = 4;
    bool cannot_build_offmap_capital = 5;
    bool old_shipyard = 6;
}

message nation_t
{
    string name = 1;
    string short_name = 2;
    capital_t capital = 3;
    int32 free_strategic_moves = 4;
    int32 capital_star_points = 5;
    offmap_possesions_t offmap_possesions = 6;
    int32 nation_id = 7;
}

message nations_t
{
    map<string, nation_t> nations = 1;
}

// Map messages
message hex_t
{
    hex_coord_t coord = 1;
    int32 owner = 2;
    feature_t feature = 3;
    repeated int32 neutral_zone_bordering = 4 [packed=true];
}

message province_hex_t
{
    int32 hex = 1;
    feature_t feature = 2;
}

message province_t
{
    repeated province_hex_t hexes = 1;
}

// How the offmap region (if any) is connected to the map.
message offmap_area_t
{
    string name = 1;
    repeated feature_t features = 2 [packed=true];
    int32 counter_hex = 3; // Where the SB counter is chown, if any.
    repeated int32 adjacent_hexes = 4 [packed=true];
}

message starting_national_holdings_t
{
    repeated province_t provinces = 1;
    offmap_area_t offmap_area = 2;
}

message map_t
{
    int32 width = 1;
    int32 height = 2;
    repeated int32 nz_planets = 3 [packed=true]; // only in starting data (all planets are MIN)
    repeated int32 nz_hexes = 4 [packed=true];   // only in starting data
    map<string, starting_national_holdings_t> starting_national_holdings = 5;
    repeated hex_t hexes = 6; // only in saved data
}

// Game model (as in Model-View-Controller)
message model_t
{
    nations_t nations = 1;
    map_t map = 2;
}

// Order of Battle messages
message oob_unit_t
{
    string unit = 1;
    int32 times = 2; // "times: 2", "times: 3", etc. -- omission implies x1
}

// TODO: year,season -> turn_t
message production_element_t
{
    int32 year = 1;
    season_t season = 2;
    repeated oob_unit_t units = 3;
}

// TODO: year,season -> turn_t
message starting_fleet_t
{
    repeated int32 hexes = 1 [packed=true]; // empty indicates offmap
    repeated oob_unit_t units = 2;
    bool reserve = 3;
    repeated production_element_t prewar_construction = 4;
    int32 strategic_move_arrival_year = 5;
    season_t strategic_move_arrival_season = 6;
    map<int32, int32> hex_placement_limits = 7; // hex coord to unit limit
}

message mothball_reserve_t
{
    repeated oob_unit_t units = 1;
    repeated oob_unit_t war_release = 2;
    repeated oob_unit_t limited_war_release = 3;
}

// TODO Special production rules
// TODO Production notes
message order_of_battle_t
{
    map<string, starting_fleet_t> starting_fleets = 1;
    mothball_reserve_t mothball_reserve = 2;
    repeated production_element_t production = 3;
}

message orders_of_battle_t
{
    map<string, order_of_battle_t> oobs = 1;
}


// units
message unit_def_side_t
{
    float att = 1;
    float def = 2;
    bool scout = 3;
    float fighters = 4;
    float heavy_fighter_bonus = 5;
    int32 pfs = 6;
    int32 drones = 7;
    bool mauler = 8;
    repeated tug_mission_t tug_missions = 9;
}

message towable_t
{
    int32 move_cost = 1;
    int32 strat_move_limit = 2;
}

message production_cost_t
{
    int32 cost = 1;
    int32 fighter_cost = 2;
}

message unit_def_t
{
    string name = 1;
    int32 cmd = 2;
    unit_def_side_t uncrippled = 3;
    unit_def_side_t crippled = 4;
    escort_type_t escort_type = 5;
    turn_t available = 6;
    bool pod = 7;
    int32 max_in_service = 8;
    production_cost_t construction = 9;
    map<string, production_cost_t> substitutions = 10;
    map<string, production_cost_t> conversions = 11;
    int32 move = 12;
    carrier_type_t carrier_type = 13;
    bool not_spaceworthy = 14;
    towable_t towable = 15;
    int32 salvage = 16;
    string notes = 17;
}

message nation_unit_defs_t
{
    repeated unit_def_t units = 1;
}

message unit_defs_t
{
    map<string, nation_unit_defs_t> nation_units = 1;
}
